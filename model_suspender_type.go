/*
Render Public API

Manage everything about your Render services

API version: 1.0.0
Contact: support@render.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package render

import (
	"encoding/json"
	"fmt"
)

// SuspenderType the model 'SuspenderType'
type SuspenderType string

// List of suspenderType
const (
	ADMIN SuspenderType = "admin"
	BILLING SuspenderType = "billing"
	USER SuspenderType = "user"
	PARENT_SERVICE SuspenderType = "parent_service"
	UNKNOWN SuspenderType = "unknown"
)

// All allowed values of SuspenderType enum
var AllowedSuspenderTypeEnumValues = []SuspenderType{
	"admin",
	"billing",
	"user",
	"parent_service",
	"unknown",
}

func (v *SuspenderType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SuspenderType(value)
	for _, existing := range AllowedSuspenderTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SuspenderType", value)
}

// NewSuspenderTypeFromValue returns a pointer to a valid SuspenderType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSuspenderTypeFromValue(v string) (*SuspenderType, error) {
	ev := SuspenderType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SuspenderType: valid values are %v", v, AllowedSuspenderTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SuspenderType) IsValid() bool {
	for _, existing := range AllowedSuspenderTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to suspenderType value
func (v SuspenderType) Ptr() *SuspenderType {
	return &v
}

type NullableSuspenderType struct {
	value *SuspenderType
	isSet bool
}

func (v NullableSuspenderType) Get() *SuspenderType {
	return v.value
}

func (v *NullableSuspenderType) Set(val *SuspenderType) {
	v.value = val
	v.isSet = true
}

func (v NullableSuspenderType) IsSet() bool {
	return v.isSet
}

func (v *NullableSuspenderType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuspenderType(val *SuspenderType) *NullableSuspenderType {
	return &NullableSuspenderType{value: val, isSet: true}
}

func (v NullableSuspenderType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuspenderType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

