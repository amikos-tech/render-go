/*
Render Public API

Manage everything about your Render services

API version: 1.0.0
Contact: support@render.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package render

import (
	"encoding/json"
	"fmt"
)

// WebServiceDetailsEnvSpecificDetails - struct for WebServiceDetailsEnvSpecificDetails
type WebServiceDetailsEnvSpecificDetails struct {
	DockerDetails *DockerDetails
	NativeEnvironmentDetails *NativeEnvironmentDetails
}

// DockerDetailsAsWebServiceDetailsEnvSpecificDetails is a convenience function that returns DockerDetails wrapped in WebServiceDetailsEnvSpecificDetails
func DockerDetailsAsWebServiceDetailsEnvSpecificDetails(v *DockerDetails) WebServiceDetailsEnvSpecificDetails {
	return WebServiceDetailsEnvSpecificDetails{
		DockerDetails: v,
	}
}

// NativeEnvironmentDetailsAsWebServiceDetailsEnvSpecificDetails is a convenience function that returns NativeEnvironmentDetails wrapped in WebServiceDetailsEnvSpecificDetails
func NativeEnvironmentDetailsAsWebServiceDetailsEnvSpecificDetails(v *NativeEnvironmentDetails) WebServiceDetailsEnvSpecificDetails {
	return WebServiceDetailsEnvSpecificDetails{
		NativeEnvironmentDetails: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *WebServiceDetailsEnvSpecificDetails) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DockerDetails
	err = newStrictDecoder(data).Decode(&dst.DockerDetails)
	if err == nil {
		jsonDockerDetails, _ := json.Marshal(dst.DockerDetails)
		if string(jsonDockerDetails) == "{}" { // empty struct
			dst.DockerDetails = nil
		} else {
			match++
		}
	} else {
		dst.DockerDetails = nil
	}

	// try to unmarshal data into NativeEnvironmentDetails
	err = newStrictDecoder(data).Decode(&dst.NativeEnvironmentDetails)
	if err == nil {
		jsonNativeEnvironmentDetails, _ := json.Marshal(dst.NativeEnvironmentDetails)
		if string(jsonNativeEnvironmentDetails) == "{}" { // empty struct
			dst.NativeEnvironmentDetails = nil
		} else {
			match++
		}
	} else {
		dst.NativeEnvironmentDetails = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DockerDetails = nil
		dst.NativeEnvironmentDetails = nil

		return fmt.Errorf("data matches more than one schema in oneOf(WebServiceDetailsEnvSpecificDetails)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(WebServiceDetailsEnvSpecificDetails)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src WebServiceDetailsEnvSpecificDetails) MarshalJSON() ([]byte, error) {
	if src.DockerDetails != nil {
		return json.Marshal(&src.DockerDetails)
	}

	if src.NativeEnvironmentDetails != nil {
		return json.Marshal(&src.NativeEnvironmentDetails)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *WebServiceDetailsEnvSpecificDetails) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.DockerDetails != nil {
		return obj.DockerDetails
	}

	if obj.NativeEnvironmentDetails != nil {
		return obj.NativeEnvironmentDetails
	}

	// all schemas are nil
	return nil
}

type NullableWebServiceDetailsEnvSpecificDetails struct {
	value *WebServiceDetailsEnvSpecificDetails
	isSet bool
}

func (v NullableWebServiceDetailsEnvSpecificDetails) Get() *WebServiceDetailsEnvSpecificDetails {
	return v.value
}

func (v *NullableWebServiceDetailsEnvSpecificDetails) Set(val *WebServiceDetailsEnvSpecificDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableWebServiceDetailsEnvSpecificDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableWebServiceDetailsEnvSpecificDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebServiceDetailsEnvSpecificDetails(val *WebServiceDetailsEnvSpecificDetails) *NullableWebServiceDetailsEnvSpecificDetails {
	return &NullableWebServiceDetailsEnvSpecificDetails{value: val, isSet: true}
}

func (v NullableWebServiceDetailsEnvSpecificDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebServiceDetailsEnvSpecificDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


