/*
Render Public API

Manage everything about your Render services

API version: 1.0.0
Contact: support@render.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package render

import (
	"encoding/json"
	"fmt"
)

// NotifySetting the model 'NotifySetting'
type NotifySetting string

// List of notifySetting
const (
	DEFAULT NotifySetting = "default"
	NOTIFY NotifySetting = "notify"
	IGNORE NotifySetting = "ignore"
)

// All allowed values of NotifySetting enum
var AllowedNotifySettingEnumValues = []NotifySetting{
	"default",
	"notify",
	"ignore",
}

func (v *NotifySetting) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NotifySetting(value)
	for _, existing := range AllowedNotifySettingEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NotifySetting", value)
}

// NewNotifySettingFromValue returns a pointer to a valid NotifySetting
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNotifySettingFromValue(v string) (*NotifySetting, error) {
	ev := NotifySetting(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NotifySetting: valid values are %v", v, AllowedNotifySettingEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NotifySetting) IsValid() bool {
	for _, existing := range AllowedNotifySettingEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to notifySetting value
func (v NotifySetting) Ptr() *NotifySetting {
	return &v
}

type NullableNotifySetting struct {
	value *NotifySetting
	isSet bool
}

func (v NullableNotifySetting) Get() *NotifySetting {
	return v.value
}

func (v *NullableNotifySetting) Set(val *NotifySetting) {
	v.value = val
	v.isSet = true
}

func (v NullableNotifySetting) IsSet() bool {
	return v.isSet
}

func (v *NullableNotifySetting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotifySetting(val *NotifySetting) *NullableNotifySetting {
	return &NullableNotifySetting{value: val, isSet: true}
}

func (v NullableNotifySetting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotifySetting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

