/*
Render Public API

Manage everything about your Render services

API version: 1.0.0
Contact: support@render.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package render

import (
	"encoding/json"
	"fmt"
)

// ServiceEnv the model 'ServiceEnv'
type ServiceEnv string

// List of serviceEnv
const (
	DOCKER ServiceEnv = "docker"
	ELIXIR ServiceEnv = "elixir"
	GO ServiceEnv = "go"
	NODE ServiceEnv = "node"
	PYTHON ServiceEnv = "python"
	RUBY ServiceEnv = "ruby"
	RUST ServiceEnv = "rust"
)

// All allowed values of ServiceEnv enum
var AllowedServiceEnvEnumValues = []ServiceEnv{
	"docker",
	"elixir",
	"go",
	"node",
	"python",
	"ruby",
	"rust",
}

func (v *ServiceEnv) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ServiceEnv(value)
	for _, existing := range AllowedServiceEnvEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ServiceEnv", value)
}

// NewServiceEnvFromValue returns a pointer to a valid ServiceEnv
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewServiceEnvFromValue(v string) (*ServiceEnv, error) {
	ev := ServiceEnv(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ServiceEnv: valid values are %v", v, AllowedServiceEnvEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ServiceEnv) IsValid() bool {
	for _, existing := range AllowedServiceEnvEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to serviceEnv value
func (v ServiceEnv) Ptr() *ServiceEnv {
	return &v
}

type NullableServiceEnv struct {
	value *ServiceEnv
	isSet bool
}

func (v NullableServiceEnv) Get() *ServiceEnv {
	return v.value
}

func (v *NullableServiceEnv) Set(val *ServiceEnv) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceEnv) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceEnv) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceEnv(val *ServiceEnv) *NullableServiceEnv {
	return &NullableServiceEnv{value: val, isSet: true}
}

func (v NullableServiceEnv) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceEnv) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

