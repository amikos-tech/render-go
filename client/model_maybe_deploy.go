/*
Render Public API

Manage everything about your Render services

API version: 1.0.0
Contact: support@render.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package render

import (
	"encoding/json"
)

// MaybeDeploy struct for MaybeDeploy
type MaybeDeploy struct {
	TriggeringDeploy *string `json:"triggeringDeploy,omitempty"`
}

// NewMaybeDeploy instantiates a new MaybeDeploy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMaybeDeploy() *MaybeDeploy {
	this := MaybeDeploy{}
	return &this
}

// NewMaybeDeployWithDefaults instantiates a new MaybeDeploy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMaybeDeployWithDefaults() *MaybeDeploy {
	this := MaybeDeploy{}
	return &this
}

// GetTriggeringDeploy returns the TriggeringDeploy field value if set, zero value otherwise.
func (o *MaybeDeploy) GetTriggeringDeploy() string {
	if o == nil || isNil(o.TriggeringDeploy) {
		var ret string
		return ret
	}
	return *o.TriggeringDeploy
}

// GetTriggeringDeployOk returns a tuple with the TriggeringDeploy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MaybeDeploy) GetTriggeringDeployOk() (*string, bool) {
	if o == nil || isNil(o.TriggeringDeploy) {
    return nil, false
	}
	return o.TriggeringDeploy, true
}

// HasTriggeringDeploy returns a boolean if a field has been set.
func (o *MaybeDeploy) HasTriggeringDeploy() bool {
	if o != nil && !isNil(o.TriggeringDeploy) {
		return true
	}

	return false
}

// SetTriggeringDeploy gets a reference to the given string and assigns it to the TriggeringDeploy field.
func (o *MaybeDeploy) SetTriggeringDeploy(v string) {
	o.TriggeringDeploy = &v
}

func (o MaybeDeploy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.TriggeringDeploy) {
		toSerialize["triggeringDeploy"] = o.TriggeringDeploy
	}
	return json.Marshal(toSerialize)
}

type NullableMaybeDeploy struct {
	value *MaybeDeploy
	isSet bool
}

func (v NullableMaybeDeploy) Get() *MaybeDeploy {
	return v.value
}

func (v *NullableMaybeDeploy) Set(val *MaybeDeploy) {
	v.value = val
	v.isSet = true
}

func (v NullableMaybeDeploy) IsSet() bool {
	return v.isSet
}

func (v *NullableMaybeDeploy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMaybeDeploy(val *MaybeDeploy) *NullableMaybeDeploy {
	return &NullableMaybeDeploy{value: val, isSet: true}
}

func (v NullableMaybeDeploy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMaybeDeploy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


