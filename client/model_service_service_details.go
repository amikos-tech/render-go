/*
Render Public API

Manage everything about your Render services

API version: 1.0.0
Contact: support@render.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package render

import (
	"encoding/json"
	"fmt"
)

// ServiceServiceDetails - struct for ServiceServiceDetails
type ServiceServiceDetails struct {
	BackgroundWorkerDetails *BackgroundWorkerDetails
	CronJobDetails *CronJobDetails
	PrivateServiceDetails *PrivateServiceDetails
	StaticSiteDetails *StaticSiteDetails
	WebServiceDetails *WebServiceDetails
}

// BackgroundWorkerDetailsAsServiceServiceDetails is a convenience function that returns BackgroundWorkerDetails wrapped in ServiceServiceDetails
func BackgroundWorkerDetailsAsServiceServiceDetails(v *BackgroundWorkerDetails) ServiceServiceDetails {
	return ServiceServiceDetails{
		BackgroundWorkerDetails: v,
	}
}

// CronJobDetailsAsServiceServiceDetails is a convenience function that returns CronJobDetails wrapped in ServiceServiceDetails
func CronJobDetailsAsServiceServiceDetails(v *CronJobDetails) ServiceServiceDetails {
	return ServiceServiceDetails{
		CronJobDetails: v,
	}
}

// PrivateServiceDetailsAsServiceServiceDetails is a convenience function that returns PrivateServiceDetails wrapped in ServiceServiceDetails
func PrivateServiceDetailsAsServiceServiceDetails(v *PrivateServiceDetails) ServiceServiceDetails {
	return ServiceServiceDetails{
		PrivateServiceDetails: v,
	}
}

// StaticSiteDetailsAsServiceServiceDetails is a convenience function that returns StaticSiteDetails wrapped in ServiceServiceDetails
func StaticSiteDetailsAsServiceServiceDetails(v *StaticSiteDetails) ServiceServiceDetails {
	return ServiceServiceDetails{
		StaticSiteDetails: v,
	}
}

// WebServiceDetailsAsServiceServiceDetails is a convenience function that returns WebServiceDetails wrapped in ServiceServiceDetails
func WebServiceDetailsAsServiceServiceDetails(v *WebServiceDetails) ServiceServiceDetails {
	return ServiceServiceDetails{
		WebServiceDetails: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ServiceServiceDetails) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into BackgroundWorkerDetails
	err = newStrictDecoder(data).Decode(&dst.BackgroundWorkerDetails)
	if err == nil {
		jsonBackgroundWorkerDetails, _ := json.Marshal(dst.BackgroundWorkerDetails)
		if string(jsonBackgroundWorkerDetails) == "{}" { // empty struct
			dst.BackgroundWorkerDetails = nil
		} else {
			match++
		}
	} else {
		dst.BackgroundWorkerDetails = nil
	}

	// try to unmarshal data into CronJobDetails
	err = newStrictDecoder(data).Decode(&dst.CronJobDetails)
	if err == nil {
		jsonCronJobDetails, _ := json.Marshal(dst.CronJobDetails)
		if string(jsonCronJobDetails) == "{}" { // empty struct
			dst.CronJobDetails = nil
		} else {
			match++
		}
	} else {
		dst.CronJobDetails = nil
	}

	// try to unmarshal data into PrivateServiceDetails
	err = newStrictDecoder(data).Decode(&dst.PrivateServiceDetails)
	if err == nil {
		jsonPrivateServiceDetails, _ := json.Marshal(dst.PrivateServiceDetails)
		if string(jsonPrivateServiceDetails) == "{}" { // empty struct
			dst.PrivateServiceDetails = nil
		} else {
			match++
		}
	} else {
		dst.PrivateServiceDetails = nil
	}

	// try to unmarshal data into StaticSiteDetails
	err = newStrictDecoder(data).Decode(&dst.StaticSiteDetails)
	if err == nil {
		jsonStaticSiteDetails, _ := json.Marshal(dst.StaticSiteDetails)
		if string(jsonStaticSiteDetails) == "{}" { // empty struct
			dst.StaticSiteDetails = nil
		} else {
			match++
		}
	} else {
		dst.StaticSiteDetails = nil
	}

	// try to unmarshal data into WebServiceDetails
	err = newStrictDecoder(data).Decode(&dst.WebServiceDetails)
	if err == nil {
		jsonWebServiceDetails, _ := json.Marshal(dst.WebServiceDetails)
		if string(jsonWebServiceDetails) == "{}" { // empty struct
			dst.WebServiceDetails = nil
		} else {
			match++
		}
	} else {
		dst.WebServiceDetails = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.BackgroundWorkerDetails = nil
		dst.CronJobDetails = nil
		dst.PrivateServiceDetails = nil
		dst.StaticSiteDetails = nil
		dst.WebServiceDetails = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ServiceServiceDetails)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ServiceServiceDetails)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ServiceServiceDetails) MarshalJSON() ([]byte, error) {
	if src.BackgroundWorkerDetails != nil {
		return json.Marshal(&src.BackgroundWorkerDetails)
	}

	if src.CronJobDetails != nil {
		return json.Marshal(&src.CronJobDetails)
	}

	if src.PrivateServiceDetails != nil {
		return json.Marshal(&src.PrivateServiceDetails)
	}

	if src.StaticSiteDetails != nil {
		return json.Marshal(&src.StaticSiteDetails)
	}

	if src.WebServiceDetails != nil {
		return json.Marshal(&src.WebServiceDetails)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ServiceServiceDetails) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.BackgroundWorkerDetails != nil {
		return obj.BackgroundWorkerDetails
	}

	if obj.CronJobDetails != nil {
		return obj.CronJobDetails
	}

	if obj.PrivateServiceDetails != nil {
		return obj.PrivateServiceDetails
	}

	if obj.StaticSiteDetails != nil {
		return obj.StaticSiteDetails
	}

	if obj.WebServiceDetails != nil {
		return obj.WebServiceDetails
	}

	// all schemas are nil
	return nil
}

type NullableServiceServiceDetails struct {
	value *ServiceServiceDetails
	isSet bool
}

func (v NullableServiceServiceDetails) Get() *ServiceServiceDetails {
	return v.value
}

func (v *NullableServiceServiceDetails) Set(val *ServiceServiceDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceServiceDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceServiceDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceServiceDetails(val *ServiceServiceDetails) *NullableServiceServiceDetails {
	return &NullableServiceServiceDetails{value: val, isSet: true}
}

func (v NullableServiceServiceDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceServiceDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


