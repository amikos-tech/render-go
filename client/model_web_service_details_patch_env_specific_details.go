/*
Render Public API

Manage everything about your Render services

API version: 1.0.0
Contact: support@render.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package render

import (
	"encoding/json"
	"fmt"
)

// WebServiceDetailsPATCHEnvSpecificDetails - struct for WebServiceDetailsPATCHEnvSpecificDetails
type WebServiceDetailsPATCHEnvSpecificDetails struct {
	DockerDetailsPATCH *DockerDetailsPATCH
	NativeEnvironmentDetailsPATCH *NativeEnvironmentDetailsPATCH
}

// DockerDetailsPATCHAsWebServiceDetailsPATCHEnvSpecificDetails is a convenience function that returns DockerDetailsPATCH wrapped in WebServiceDetailsPATCHEnvSpecificDetails
func DockerDetailsPATCHAsWebServiceDetailsPATCHEnvSpecificDetails(v *DockerDetailsPATCH) WebServiceDetailsPATCHEnvSpecificDetails {
	return WebServiceDetailsPATCHEnvSpecificDetails{
		DockerDetailsPATCH: v,
	}
}

// NativeEnvironmentDetailsPATCHAsWebServiceDetailsPATCHEnvSpecificDetails is a convenience function that returns NativeEnvironmentDetailsPATCH wrapped in WebServiceDetailsPATCHEnvSpecificDetails
func NativeEnvironmentDetailsPATCHAsWebServiceDetailsPATCHEnvSpecificDetails(v *NativeEnvironmentDetailsPATCH) WebServiceDetailsPATCHEnvSpecificDetails {
	return WebServiceDetailsPATCHEnvSpecificDetails{
		NativeEnvironmentDetailsPATCH: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *WebServiceDetailsPATCHEnvSpecificDetails) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DockerDetailsPATCH
	err = newStrictDecoder(data).Decode(&dst.DockerDetailsPATCH)
	if err == nil {
		jsonDockerDetailsPATCH, _ := json.Marshal(dst.DockerDetailsPATCH)
		if string(jsonDockerDetailsPATCH) == "{}" { // empty struct
			dst.DockerDetailsPATCH = nil
		} else {
			match++
		}
	} else {
		dst.DockerDetailsPATCH = nil
	}

	// try to unmarshal data into NativeEnvironmentDetailsPATCH
	err = newStrictDecoder(data).Decode(&dst.NativeEnvironmentDetailsPATCH)
	if err == nil {
		jsonNativeEnvironmentDetailsPATCH, _ := json.Marshal(dst.NativeEnvironmentDetailsPATCH)
		if string(jsonNativeEnvironmentDetailsPATCH) == "{}" { // empty struct
			dst.NativeEnvironmentDetailsPATCH = nil
		} else {
			match++
		}
	} else {
		dst.NativeEnvironmentDetailsPATCH = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DockerDetailsPATCH = nil
		dst.NativeEnvironmentDetailsPATCH = nil

		return fmt.Errorf("data matches more than one schema in oneOf(WebServiceDetailsPATCHEnvSpecificDetails)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(WebServiceDetailsPATCHEnvSpecificDetails)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src WebServiceDetailsPATCHEnvSpecificDetails) MarshalJSON() ([]byte, error) {
	if src.DockerDetailsPATCH != nil {
		return json.Marshal(&src.DockerDetailsPATCH)
	}

	if src.NativeEnvironmentDetailsPATCH != nil {
		return json.Marshal(&src.NativeEnvironmentDetailsPATCH)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *WebServiceDetailsPATCHEnvSpecificDetails) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.DockerDetailsPATCH != nil {
		return obj.DockerDetailsPATCH
	}

	if obj.NativeEnvironmentDetailsPATCH != nil {
		return obj.NativeEnvironmentDetailsPATCH
	}

	// all schemas are nil
	return nil
}

type NullableWebServiceDetailsPATCHEnvSpecificDetails struct {
	value *WebServiceDetailsPATCHEnvSpecificDetails
	isSet bool
}

func (v NullableWebServiceDetailsPATCHEnvSpecificDetails) Get() *WebServiceDetailsPATCHEnvSpecificDetails {
	return v.value
}

func (v *NullableWebServiceDetailsPATCHEnvSpecificDetails) Set(val *WebServiceDetailsPATCHEnvSpecificDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableWebServiceDetailsPATCHEnvSpecificDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableWebServiceDetailsPATCHEnvSpecificDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebServiceDetailsPATCHEnvSpecificDetails(val *WebServiceDetailsPATCHEnvSpecificDetails) *NullableWebServiceDetailsPATCHEnvSpecificDetails {
	return &NullableWebServiceDetailsPATCHEnvSpecificDetails{value: val, isSet: true}
}

func (v NullableWebServiceDetailsPATCHEnvSpecificDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebServiceDetailsPATCHEnvSpecificDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


