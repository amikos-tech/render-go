// Package render provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package render

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for BackgroundWorkerDetailsPullRequestPreviewsEnabled.
const (
	BackgroundWorkerDetailsPullRequestPreviewsEnabledNo  BackgroundWorkerDetailsPullRequestPreviewsEnabled = "no"
	BackgroundWorkerDetailsPullRequestPreviewsEnabledYes BackgroundWorkerDetailsPullRequestPreviewsEnabled = "yes"
)

// Defines values for BackgroundWorkerDetailsPATCHPlan.
const (
	BackgroundWorkerDetailsPATCHPlanPro          BackgroundWorkerDetailsPATCHPlan = "pro"
	BackgroundWorkerDetailsPATCHPlanProPlus      BackgroundWorkerDetailsPATCHPlan = "pro_plus"
	BackgroundWorkerDetailsPATCHPlanStandard     BackgroundWorkerDetailsPATCHPlan = "standard"
	BackgroundWorkerDetailsPATCHPlanStandardPlus BackgroundWorkerDetailsPATCHPlan = "standard_plus"
	BackgroundWorkerDetailsPATCHPlanStarter      BackgroundWorkerDetailsPATCHPlan = "starter"
	BackgroundWorkerDetailsPATCHPlanStarterPlus  BackgroundWorkerDetailsPATCHPlan = "starter_plus"
)

// Defines values for BackgroundWorkerDetailsPATCHPullRequestPreviewsEnabled.
const (
	BackgroundWorkerDetailsPATCHPullRequestPreviewsEnabledNo  BackgroundWorkerDetailsPATCHPullRequestPreviewsEnabled = "no"
	BackgroundWorkerDetailsPATCHPullRequestPreviewsEnabledYes BackgroundWorkerDetailsPATCHPullRequestPreviewsEnabled = "yes"
)

// Defines values for BackgroundWorkerDetailsPOSTPlan.
const (
	BackgroundWorkerDetailsPOSTPlanPro          BackgroundWorkerDetailsPOSTPlan = "pro"
	BackgroundWorkerDetailsPOSTPlanProPlus      BackgroundWorkerDetailsPOSTPlan = "pro_plus"
	BackgroundWorkerDetailsPOSTPlanStandard     BackgroundWorkerDetailsPOSTPlan = "standard"
	BackgroundWorkerDetailsPOSTPlanStandardPlus BackgroundWorkerDetailsPOSTPlan = "standard_plus"
	BackgroundWorkerDetailsPOSTPlanStarter      BackgroundWorkerDetailsPOSTPlan = "starter"
	BackgroundWorkerDetailsPOSTPlanStarterPlus  BackgroundWorkerDetailsPOSTPlan = "starter_plus"
)

// Defines values for BackgroundWorkerDetailsPOSTPullRequestPreviewsEnabled.
const (
	BackgroundWorkerDetailsPOSTPullRequestPreviewsEnabledNo  BackgroundWorkerDetailsPOSTPullRequestPreviewsEnabled = "no"
	BackgroundWorkerDetailsPOSTPullRequestPreviewsEnabledYes BackgroundWorkerDetailsPOSTPullRequestPreviewsEnabled = "yes"
)

// Defines values for CronJobDetailsPATCHPlan.
const (
	CronJobDetailsPATCHPlanPro          CronJobDetailsPATCHPlan = "pro"
	CronJobDetailsPATCHPlanProPlus      CronJobDetailsPATCHPlan = "pro_plus"
	CronJobDetailsPATCHPlanStandard     CronJobDetailsPATCHPlan = "standard"
	CronJobDetailsPATCHPlanStandardPlus CronJobDetailsPATCHPlan = "standard_plus"
	CronJobDetailsPATCHPlanStarter      CronJobDetailsPATCHPlan = "starter"
	CronJobDetailsPATCHPlanStarterPlus  CronJobDetailsPATCHPlan = "starter_plus"
)

// Defines values for CronJobDetailsPOSTPlan.
const (
	CronJobDetailsPOSTPlanPro          CronJobDetailsPOSTPlan = "pro"
	CronJobDetailsPOSTPlanProPlus      CronJobDetailsPOSTPlan = "pro_plus"
	CronJobDetailsPOSTPlanStandard     CronJobDetailsPOSTPlan = "standard"
	CronJobDetailsPOSTPlanStandardPlus CronJobDetailsPOSTPlan = "standard_plus"
	CronJobDetailsPOSTPlanStarter      CronJobDetailsPOSTPlan = "starter"
	CronJobDetailsPOSTPlanStarterPlus  CronJobDetailsPOSTPlan = "starter_plus"
)

// Defines values for CustomDomainDomainType.
const (
	CustomDomainDomainTypeApex      CustomDomainDomainType = "apex"
	CustomDomainDomainTypeSubdomain CustomDomainDomainType = "subdomain"
)

// Defines values for CustomDomainVerificationStatus.
const (
	CustomDomainVerificationStatusUnverified CustomDomainVerificationStatus = "unverified"
	CustomDomainVerificationStatusVerified   CustomDomainVerificationStatus = "verified"
)

// Defines values for DeployStatus.
const (
	BuildFailed      DeployStatus = "build_failed"
	BuildInProgress  DeployStatus = "build_in_progress"
	Canceled         DeployStatus = "canceled"
	Created          DeployStatus = "created"
	Deactivated      DeployStatus = "deactivated"
	Live             DeployStatus = "live"
	UpdateFailed     DeployStatus = "update_failed"
	UpdateInProgress DeployStatus = "update_in_progress"
)

// Defines values for EnvVarKeyGenerateValueGenerateValue.
const (
	EnvVarKeyGenerateValueGenerateValueNo  EnvVarKeyGenerateValueGenerateValue = "no"
	EnvVarKeyGenerateValueGenerateValueYes EnvVarKeyGenerateValueGenerateValue = "yes"
)

// Defines values for NotifySetting.
const (
	Default NotifySetting = "default"
	Ignore  NotifySetting = "ignore"
	Notify  NotifySetting = "notify"
)

// Defines values for OwnerType.
const (
	OwnerTypeTeam OwnerType = "team"
	OwnerTypeUser OwnerType = "user"
)

// Defines values for PrivateServiceDetailsPullRequestPreviewsEnabled.
const (
	PrivateServiceDetailsPullRequestPreviewsEnabledNo  PrivateServiceDetailsPullRequestPreviewsEnabled = "no"
	PrivateServiceDetailsPullRequestPreviewsEnabledYes PrivateServiceDetailsPullRequestPreviewsEnabled = "yes"
)

// Defines values for PrivateServiceDetailsPATCHPlan.
const (
	PrivateServiceDetailsPATCHPlanPro          PrivateServiceDetailsPATCHPlan = "pro"
	PrivateServiceDetailsPATCHPlanProPlus      PrivateServiceDetailsPATCHPlan = "pro_plus"
	PrivateServiceDetailsPATCHPlanStandard     PrivateServiceDetailsPATCHPlan = "standard"
	PrivateServiceDetailsPATCHPlanStandardPlus PrivateServiceDetailsPATCHPlan = "standard_plus"
	PrivateServiceDetailsPATCHPlanStarter      PrivateServiceDetailsPATCHPlan = "starter"
	PrivateServiceDetailsPATCHPlanStarterPlus  PrivateServiceDetailsPATCHPlan = "starter_plus"
)

// Defines values for PrivateServiceDetailsPATCHPullRequestPreviewsEnabled.
const (
	PrivateServiceDetailsPATCHPullRequestPreviewsEnabledNo  PrivateServiceDetailsPATCHPullRequestPreviewsEnabled = "no"
	PrivateServiceDetailsPATCHPullRequestPreviewsEnabledYes PrivateServiceDetailsPATCHPullRequestPreviewsEnabled = "yes"
)

// Defines values for PrivateServiceDetailsPOSTPlan.
const (
	PrivateServiceDetailsPOSTPlanPro          PrivateServiceDetailsPOSTPlan = "pro"
	PrivateServiceDetailsPOSTPlanProPlus      PrivateServiceDetailsPOSTPlan = "pro_plus"
	PrivateServiceDetailsPOSTPlanStandard     PrivateServiceDetailsPOSTPlan = "standard"
	PrivateServiceDetailsPOSTPlanStandardPlus PrivateServiceDetailsPOSTPlan = "standard_plus"
	PrivateServiceDetailsPOSTPlanStarter      PrivateServiceDetailsPOSTPlan = "starter"
	PrivateServiceDetailsPOSTPlanStarterPlus  PrivateServiceDetailsPOSTPlan = "starter_plus"
)

// Defines values for PrivateServiceDetailsPOSTPullRequestPreviewsEnabled.
const (
	PrivateServiceDetailsPOSTPullRequestPreviewsEnabledNo  PrivateServiceDetailsPOSTPullRequestPreviewsEnabled = "no"
	PrivateServiceDetailsPOSTPullRequestPreviewsEnabledYes PrivateServiceDetailsPOSTPullRequestPreviewsEnabled = "yes"
)

// Defines values for Region.
const (
	Frankfurt Region = "frankfurt"
	Oregon    Region = "oregon"
)

// Defines values for RouteType.
const (
	RouteTypeRedirect RouteType = "redirect"
	RouteTypeRewrite  RouteType = "rewrite"
)

// Defines values for ServerPortProtocol.
const (
	TCP ServerPortProtocol = "TCP"
	UDP ServerPortProtocol = "UDP"
)

// Defines values for ServiceAutoDeploy.
const (
	ServiceAutoDeployNo  ServiceAutoDeploy = "no"
	ServiceAutoDeployYes ServiceAutoDeploy = "yes"
)

// Defines values for ServiceSuspended.
const (
	ServiceSuspendedNotSuspended ServiceSuspended = "not_suspended"
	ServiceSuspendedSuspended    ServiceSuspended = "suspended"
)

// Defines values for ServiceEnv.
const (
	Docker ServiceEnv = "docker"
	Elixir ServiceEnv = "elixir"
	Go     ServiceEnv = "go"
	Node   ServiceEnv = "node"
	Python ServiceEnv = "python"
	Ruby   ServiceEnv = "ruby"
	Rust   ServiceEnv = "rust"
)

// Defines values for ServicePATCHAutoDeploy.
const (
	ServicePATCHAutoDeployNo  ServicePATCHAutoDeploy = "no"
	ServicePATCHAutoDeployYes ServicePATCHAutoDeploy = "yes"
)

// Defines values for ServicePOSTAutoDeploy.
const (
	ServicePOSTAutoDeployNo  ServicePOSTAutoDeploy = "no"
	ServicePOSTAutoDeployYes ServicePOSTAutoDeploy = "yes"
)

// Defines values for ServiceType.
const (
	BackgroundWorker ServiceType = "background_worker"
	CronJob          ServiceType = "cron_job"
	PrivateService   ServiceType = "private_service"
	StaticSite       ServiceType = "static_site"
	WebService       ServiceType = "web_service"
)

// Defines values for StaticSiteDetailsPullRequestPreviewsEnabled.
const (
	StaticSiteDetailsPullRequestPreviewsEnabledNo  StaticSiteDetailsPullRequestPreviewsEnabled = "no"
	StaticSiteDetailsPullRequestPreviewsEnabledYes StaticSiteDetailsPullRequestPreviewsEnabled = "yes"
)

// Defines values for StaticSiteDetailsPATCHPullRequestPreviewsEnabled.
const (
	StaticSiteDetailsPATCHPullRequestPreviewsEnabledNo  StaticSiteDetailsPATCHPullRequestPreviewsEnabled = "no"
	StaticSiteDetailsPATCHPullRequestPreviewsEnabledYes StaticSiteDetailsPATCHPullRequestPreviewsEnabled = "yes"
)

// Defines values for StaticSiteDetailsPOSTPullRequestPreviewsEnabled.
const (
	StaticSiteDetailsPOSTPullRequestPreviewsEnabledNo  StaticSiteDetailsPOSTPullRequestPreviewsEnabled = "no"
	StaticSiteDetailsPOSTPullRequestPreviewsEnabledYes StaticSiteDetailsPOSTPullRequestPreviewsEnabled = "yes"
)

// Defines values for SuspenderType.
const (
	SuspenderTypeAdmin         SuspenderType = "admin"
	SuspenderTypeBilling       SuspenderType = "billing"
	SuspenderTypeParentService SuspenderType = "parent_service"
	SuspenderTypeUnknown       SuspenderType = "unknown"
	SuspenderTypeUser          SuspenderType = "user"
)

// Defines values for WebServiceDetailsPullRequestPreviewsEnabled.
const (
	WebServiceDetailsPullRequestPreviewsEnabledNo  WebServiceDetailsPullRequestPreviewsEnabled = "no"
	WebServiceDetailsPullRequestPreviewsEnabledYes WebServiceDetailsPullRequestPreviewsEnabled = "yes"
)

// Defines values for WebServiceDetailsPATCHPlan.
const (
	WebServiceDetailsPATCHPlanPro          WebServiceDetailsPATCHPlan = "pro"
	WebServiceDetailsPATCHPlanProPlus      WebServiceDetailsPATCHPlan = "pro_plus"
	WebServiceDetailsPATCHPlanStandard     WebServiceDetailsPATCHPlan = "standard"
	WebServiceDetailsPATCHPlanStandardPlus WebServiceDetailsPATCHPlan = "standard_plus"
	WebServiceDetailsPATCHPlanStarter      WebServiceDetailsPATCHPlan = "starter"
	WebServiceDetailsPATCHPlanStarterPlus  WebServiceDetailsPATCHPlan = "starter_plus"
)

// Defines values for WebServiceDetailsPATCHPullRequestPreviewsEnabled.
const (
	WebServiceDetailsPATCHPullRequestPreviewsEnabledNo  WebServiceDetailsPATCHPullRequestPreviewsEnabled = "no"
	WebServiceDetailsPATCHPullRequestPreviewsEnabledYes WebServiceDetailsPATCHPullRequestPreviewsEnabled = "yes"
)

// Defines values for WebServiceDetailsPOSTPlan.
const (
	WebServiceDetailsPOSTPlanPro          WebServiceDetailsPOSTPlan = "pro"
	WebServiceDetailsPOSTPlanProPlus      WebServiceDetailsPOSTPlan = "pro_plus"
	WebServiceDetailsPOSTPlanStandard     WebServiceDetailsPOSTPlan = "standard"
	WebServiceDetailsPOSTPlanStandardPlus WebServiceDetailsPOSTPlan = "standard_plus"
	WebServiceDetailsPOSTPlanStarter      WebServiceDetailsPOSTPlan = "starter"
	WebServiceDetailsPOSTPlanStarterPlus  WebServiceDetailsPOSTPlan = "starter_plus"
)

// Defines values for WebServiceDetailsPOSTPullRequestPreviewsEnabled.
const (
	WebServiceDetailsPOSTPullRequestPreviewsEnabledNo  WebServiceDetailsPOSTPullRequestPreviewsEnabled = "no"
	WebServiceDetailsPOSTPullRequestPreviewsEnabledYes WebServiceDetailsPOSTPullRequestPreviewsEnabled = "yes"
)

// Defines values for GetServicesParamsSuspended.
const (
	GetServicesParamsSuspendedNotSuspended GetServicesParamsSuspended = "not_suspended"
	GetServicesParamsSuspendedSuspended    GetServicesParamsSuspended = "suspended"
)

// Defines values for GetCustomDomainsParamsDomainType.
const (
	GetCustomDomainsParamsDomainTypeApex      GetCustomDomainsParamsDomainType = "apex"
	GetCustomDomainsParamsDomainTypeSubdomain GetCustomDomainsParamsDomainType = "subdomain"
)

// Defines values for GetCustomDomainsParamsVerificationStatus.
const (
	GetCustomDomainsParamsVerificationStatusUnverified GetCustomDomainsParamsVerificationStatus = "unverified"
	GetCustomDomainsParamsVerificationStatusVerified   GetCustomDomainsParamsVerificationStatus = "verified"
)

// Defines values for CreateDeployJSONBodyClearCache.
const (
	Clear      CreateDeployJSONBodyClearCache = "clear"
	DoNotClear CreateDeployJSONBodyClearCache = "do_not_clear"
)

// Defines values for ListJobParamsStatus.
const (
	Failed    ListJobParamsStatus = "failed"
	Pending   ListJobParamsStatus = "pending"
	Running   ListJobParamsStatus = "running"
	Succeeded ListJobParamsStatus = "succeeded"
)

// Defines values for GetRoutesParamsType.
const (
	GetRoutesParamsTypeRedirect GetRoutesParamsType = "redirect"
	GetRoutesParamsTypeRewrite  GetRoutesParamsType = "rewrite"
)

// BackgroundWorkerDetails defines model for backgroundWorkerDetails.
type BackgroundWorkerDetails struct {
	Disk *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"disk,omitempty"`
	Env                *ServiceEnv                                 `json:"env,omitempty"`
	EnvSpecificDetails *BackgroundWorkerDetails_EnvSpecificDetails `json:"envSpecificDetails,omitempty"`
	NumInstances       *int                                        `json:"numInstances,omitempty"`
	ParentServer       *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"parentServer,omitempty"`
	Plan                       *string                                            `json:"plan,omitempty"`
	PullRequestPreviewsEnabled *BackgroundWorkerDetailsPullRequestPreviewsEnabled `json:"pullRequestPreviewsEnabled,omitempty"`
	Region                     *Region                                            `json:"region,omitempty"`
}

// BackgroundWorkerDetails_EnvSpecificDetails defines model for BackgroundWorkerDetails.EnvSpecificDetails.
type BackgroundWorkerDetails_EnvSpecificDetails struct {
	union json.RawMessage
}

// BackgroundWorkerDetailsPullRequestPreviewsEnabled defines model for BackgroundWorkerDetails.PullRequestPreviewsEnabled.
type BackgroundWorkerDetailsPullRequestPreviewsEnabled string

// BackgroundWorkerDetailsPATCH defines model for backgroundWorkerDetailsPATCH.
type BackgroundWorkerDetailsPATCH struct {
	EnvSpecificDetails         *BackgroundWorkerDetailsPATCH_EnvSpecificDetails        `json:"envSpecificDetails,omitempty"`
	NumInstances               *int                                                    `json:"numInstances,omitempty"`
	Plan                       *BackgroundWorkerDetailsPATCHPlan                       `json:"plan,omitempty"`
	PullRequestPreviewsEnabled *BackgroundWorkerDetailsPATCHPullRequestPreviewsEnabled `json:"pullRequestPreviewsEnabled,omitempty"`
}

// BackgroundWorkerDetailsPATCH_EnvSpecificDetails defines model for BackgroundWorkerDetailsPATCH.EnvSpecificDetails.
type BackgroundWorkerDetailsPATCH_EnvSpecificDetails struct {
	union json.RawMessage
}

// BackgroundWorkerDetailsPATCHPlan defines model for BackgroundWorkerDetailsPATCH.Plan.
type BackgroundWorkerDetailsPATCHPlan string

// BackgroundWorkerDetailsPATCHPullRequestPreviewsEnabled defines model for BackgroundWorkerDetailsPATCH.PullRequestPreviewsEnabled.
type BackgroundWorkerDetailsPATCHPullRequestPreviewsEnabled string

// BackgroundWorkerDetailsPOST defines model for backgroundWorkerDetailsPOST.
type BackgroundWorkerDetailsPOST struct {
	Disk *struct {
		MountPath string `json:"mountPath"`
		Name      string `json:"name"`

		// SizeGB Defaults to 1
		SizeGB *int `json:"sizeGB,omitempty"`
	} `json:"disk,omitempty"`
	Env                ServiceEnv                                      `json:"env"`
	EnvSpecificDetails *BackgroundWorkerDetailsPOST_EnvSpecificDetails `json:"envSpecificDetails,omitempty"`

	// NumInstances Defaults to 1
	NumInstances *int `json:"numInstances,omitempty"`

	// Plan Defaults to "starter"
	Plan *BackgroundWorkerDetailsPOSTPlan `json:"plan,omitempty"`

	// PullRequestPreviewsEnabled Defaults to "no"
	PullRequestPreviewsEnabled *BackgroundWorkerDetailsPOSTPullRequestPreviewsEnabled `json:"pullRequestPreviewsEnabled,omitempty"`
	Region                     *Region                                                `json:"region,omitempty"`
}

// BackgroundWorkerDetailsPOST_EnvSpecificDetails defines model for BackgroundWorkerDetailsPOST.EnvSpecificDetails.
type BackgroundWorkerDetailsPOST_EnvSpecificDetails struct {
	union json.RawMessage
}

// BackgroundWorkerDetailsPOSTPlan Defaults to "starter"
type BackgroundWorkerDetailsPOSTPlan string

// BackgroundWorkerDetailsPOSTPullRequestPreviewsEnabled Defaults to "no"
type BackgroundWorkerDetailsPOSTPullRequestPreviewsEnabled string

// CronJobDetails defines model for cronJobDetails.
type CronJobDetails struct {
	Env                 *ServiceEnv                        `json:"env,omitempty"`
	EnvSpecificDetails  *CronJobDetails_EnvSpecificDetails `json:"envSpecificDetails,omitempty"`
	LastSuccessfulRunAt *time.Time                         `json:"lastSuccessfulRunAt,omitempty"`
	Plan                *string                            `json:"plan,omitempty"`
	Region              *Region                            `json:"region,omitempty"`
	Schedule            *string                            `json:"schedule,omitempty"`
}

// CronJobDetails_EnvSpecificDetails defines model for CronJobDetails.EnvSpecificDetails.
type CronJobDetails_EnvSpecificDetails struct {
	union json.RawMessage
}

// CronJobDetailsPATCH defines model for cronJobDetailsPATCH.
type CronJobDetailsPATCH struct {
	EnvSpecificDetails *CronJobDetailsPATCH_EnvSpecificDetails `json:"envSpecificDetails,omitempty"`
	Plan               *CronJobDetailsPATCHPlan                `json:"plan,omitempty"`
	Schedule           *string                                 `json:"schedule,omitempty"`
}

// CronJobDetailsPATCH_EnvSpecificDetails defines model for CronJobDetailsPATCH.EnvSpecificDetails.
type CronJobDetailsPATCH_EnvSpecificDetails struct {
	union json.RawMessage
}

// CronJobDetailsPATCHPlan defines model for CronJobDetailsPATCH.Plan.
type CronJobDetailsPATCHPlan string

// CronJobDetailsPOST defines model for cronJobDetailsPOST.
type CronJobDetailsPOST struct {
	Env                ServiceEnv                             `json:"env"`
	EnvSpecificDetails *CronJobDetailsPOST_EnvSpecificDetails `json:"envSpecificDetails,omitempty"`

	// Plan Defaults to "starter"
	Plan     *CronJobDetailsPOSTPlan `json:"plan,omitempty"`
	Region   *Region                 `json:"region,omitempty"`
	Schedule string                  `json:"schedule"`
}

// CronJobDetailsPOST_EnvSpecificDetails defines model for CronJobDetailsPOST.EnvSpecificDetails.
type CronJobDetailsPOST_EnvSpecificDetails struct {
	union json.RawMessage
}

// CronJobDetailsPOSTPlan Defaults to "starter"
type CronJobDetailsPOSTPlan string

// CustomDomain defines model for customDomain.
type CustomDomain struct {
	CreatedAt       *time.Time              `json:"createdAt,omitempty"`
	DomainType      *CustomDomainDomainType `json:"domainType,omitempty"`
	Id              *string                 `json:"id,omitempty"`
	Name            *string                 `json:"name,omitempty"`
	PublicSuffix    *string                 `json:"publicSuffix,omitempty"`
	RedirectForName *string                 `json:"redirectForName,omitempty"`
	Server          *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"server,omitempty"`
	VerificationStatus *CustomDomainVerificationStatus `json:"verificationStatus,omitempty"`
}

// CustomDomainDomainType defines model for CustomDomain.DomainType.
type CustomDomainDomainType string

// CustomDomainVerificationStatus defines model for CustomDomain.VerificationStatus.
type CustomDomainVerificationStatus string

// Deploy defines model for deploy.
type Deploy struct {
	Commit *struct {
		CreatedAt *time.Time `json:"createdAt,omitempty"`
		Id        *string    `json:"id,omitempty"`
		Message   *string    `json:"message,omitempty"`
	} `json:"commit,omitempty"`
	CreatedAt  *time.Time    `json:"createdAt,omitempty"`
	FinishedAt *time.Time    `json:"finishedAt,omitempty"`
	Id         string        `json:"id"`
	Status     *DeployStatus `json:"status,omitempty"`
	UpdatedAt  *time.Time    `json:"updatedAt,omitempty"`
}

// DeployStatus defines model for Deploy.Status.
type DeployStatus string

// DockerDetails defines model for dockerDetails.
type DockerDetails struct {
	DockerCommand  *string `json:"dockerCommand,omitempty"`
	DockerContext  *string `json:"dockerContext,omitempty"`
	DockerfilePath *string `json:"dockerfilePath,omitempty"`
}

// DockerDetailsPATCH defines model for dockerDetailsPATCH.
type DockerDetailsPATCH struct {
	DockerCommand  *string `json:"dockerCommand,omitempty"`
	DockerContext  *string `json:"dockerContext,omitempty"`
	DockerfilePath *string `json:"dockerfilePath,omitempty"`
}

// DockerDetailsPOST defines model for dockerDetailsPOST.
type DockerDetailsPOST struct {
	DockerCommand *string `json:"dockerCommand,omitempty"`
	DockerContext *string `json:"dockerContext,omitempty"`

	// DockerfilePath Defaults to "./Dockerfile"
	DockerfilePath *string `json:"dockerfilePath,omitempty"`
}

// EnvVar defines model for envVar.
type EnvVar struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// EnvVarKeyGenerateValue defines model for envVarKeyGenerateValue.
type EnvVarKeyGenerateValue struct {
	GenerateValue EnvVarKeyGenerateValueGenerateValue `json:"generateValue"`
	Key           string                              `json:"key"`
}

// EnvVarKeyGenerateValueGenerateValue defines model for EnvVarKeyGenerateValue.GenerateValue.
type EnvVarKeyGenerateValueGenerateValue string

// EnvVarKeyValue defines model for envVarKeyValue.
type EnvVarKeyValue struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// Error defines model for error.
type Error struct {
	Id      *string `json:"id,omitempty"`
	Message *string `json:"message,omitempty"`
}

// Header defines model for header.
type Header struct {
	Name  string `json:"name"`
	Path  string `json:"path"`
	Value string `json:"value"`
}

// Job defines model for job.
type Job struct {
	CreatedAt    *string `json:"createdAt,omitempty"`
	FinishedAt   *string `json:"finishedAt,omitempty"`
	Id           *string `json:"id,omitempty"`
	PlanId       *string `json:"planId,omitempty"`
	ServiceId    *string `json:"serviceId,omitempty"`
	StartCommand *string `json:"startCommand,omitempty"`
	StartedAt    *string `json:"startedAt,omitempty"`
	Status       *string `json:"status,omitempty"`
}

// NativeEnvironmentDetails defines model for nativeEnvironmentDetails.
type NativeEnvironmentDetails struct {
	BuildCommand *string `json:"buildCommand,omitempty"`
	StartCommand *string `json:"startCommand,omitempty"`
}

// NativeEnvironmentDetailsPATCH defines model for nativeEnvironmentDetailsPATCH.
type NativeEnvironmentDetailsPATCH struct {
	BuildCommand *string `json:"buildCommand,omitempty"`
	StartCommand *string `json:"startCommand,omitempty"`
}

// NativeEnvironmentDetailsPOST defines model for nativeEnvironmentDetailsPOST.
type NativeEnvironmentDetailsPOST struct {
	BuildCommand string `json:"buildCommand"`
	StartCommand string `json:"startCommand"`
}

// NotifySetting defines model for notifySetting.
type NotifySetting string

// Owner defines model for owner.
type Owner struct {
	Email *string    `json:"email,omitempty"`
	Id    string     `json:"id"`
	Name  *string    `json:"name,omitempty"`
	Type  *OwnerType `json:"type,omitempty"`
}

// OwnerType defines model for Owner.Type.
type OwnerType string

// PrivateServiceDetails defines model for privateServiceDetails.
type PrivateServiceDetails struct {
	Disk *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"disk,omitempty"`
	Env                *ServiceEnv                               `json:"env,omitempty"`
	EnvSpecificDetails *PrivateServiceDetails_EnvSpecificDetails `json:"envSpecificDetails,omitempty"`
	NumInstances       *int                                      `json:"numInstances,omitempty"`
	OpenPorts          *[]ServerPort                             `json:"openPorts,omitempty"`
	ParentServer       *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"parentServer,omitempty"`
	Plan                       *string                                          `json:"plan,omitempty"`
	PullRequestPreviewsEnabled *PrivateServiceDetailsPullRequestPreviewsEnabled `json:"pullRequestPreviewsEnabled,omitempty"`
	Region                     *Region                                          `json:"region,omitempty"`
	Url                        *string                                          `json:"url,omitempty"`
}

// PrivateServiceDetails_EnvSpecificDetails defines model for PrivateServiceDetails.EnvSpecificDetails.
type PrivateServiceDetails_EnvSpecificDetails struct {
	union json.RawMessage
}

// PrivateServiceDetailsPullRequestPreviewsEnabled defines model for PrivateServiceDetails.PullRequestPreviewsEnabled.
type PrivateServiceDetailsPullRequestPreviewsEnabled string

// PrivateServiceDetailsPATCH defines model for privateServiceDetailsPATCH.
type PrivateServiceDetailsPATCH struct {
	EnvSpecificDetails         *PrivateServiceDetailsPATCH_EnvSpecificDetails        `json:"envSpecificDetails,omitempty"`
	NumInstances               *int                                                  `json:"numInstances,omitempty"`
	Plan                       *PrivateServiceDetailsPATCHPlan                       `json:"plan,omitempty"`
	PullRequestPreviewsEnabled *PrivateServiceDetailsPATCHPullRequestPreviewsEnabled `json:"pullRequestPreviewsEnabled,omitempty"`
}

// PrivateServiceDetailsPATCH_EnvSpecificDetails defines model for PrivateServiceDetailsPATCH.EnvSpecificDetails.
type PrivateServiceDetailsPATCH_EnvSpecificDetails struct {
	union json.RawMessage
}

// PrivateServiceDetailsPATCHPlan defines model for PrivateServiceDetailsPATCH.Plan.
type PrivateServiceDetailsPATCHPlan string

// PrivateServiceDetailsPATCHPullRequestPreviewsEnabled defines model for PrivateServiceDetailsPATCH.PullRequestPreviewsEnabled.
type PrivateServiceDetailsPATCHPullRequestPreviewsEnabled string

// PrivateServiceDetailsPOST defines model for privateServiceDetailsPOST.
type PrivateServiceDetailsPOST struct {
	Disk *struct {
		MountPath string `json:"mountPath"`
		Name      string `json:"name"`

		// SizeGB Defaults to 1
		SizeGB *int `json:"sizeGB,omitempty"`
	} `json:"disk,omitempty"`
	Env                ServiceEnv                                    `json:"env"`
	EnvSpecificDetails *PrivateServiceDetailsPOST_EnvSpecificDetails `json:"envSpecificDetails,omitempty"`

	// NumInstances Defaults to 1
	NumInstances *int `json:"numInstances,omitempty"`

	// Plan Defaults to "starter"
	Plan *PrivateServiceDetailsPOSTPlan `json:"plan,omitempty"`

	// PullRequestPreviewsEnabled Defaults to "no"
	PullRequestPreviewsEnabled *PrivateServiceDetailsPOSTPullRequestPreviewsEnabled `json:"pullRequestPreviewsEnabled,omitempty"`
	Region                     *Region                                              `json:"region,omitempty"`
}

// PrivateServiceDetailsPOST_EnvSpecificDetails defines model for PrivateServiceDetailsPOST.EnvSpecificDetails.
type PrivateServiceDetailsPOST_EnvSpecificDetails struct {
	union json.RawMessage
}

// PrivateServiceDetailsPOSTPlan Defaults to "starter"
type PrivateServiceDetailsPOSTPlan string

// PrivateServiceDetailsPOSTPullRequestPreviewsEnabled Defaults to "no"
type PrivateServiceDetailsPOSTPullRequestPreviewsEnabled string

// Region defines model for region.
type Region string

// Route defines model for route.
type Route struct {
	Destination string    `json:"destination"`
	Source      string    `json:"source"`
	Type        RouteType `json:"type"`
}

// RouteType defines model for Route.Type.
type RouteType string

// ServerPort defines model for serverPort.
type ServerPort struct {
	Port     *int                `json:"port,omitempty"`
	Protocol *ServerPortProtocol `json:"protocol,omitempty"`
}

// ServerPortProtocol defines model for ServerPort.Protocol.
type ServerPortProtocol string

// Service defines model for service.
type Service struct {
	AutoDeploy     *ServiceAutoDeploy      `json:"autoDeploy,omitempty"`
	Branch         *string                 `json:"branch,omitempty"`
	CreatedAt      *time.Time              `json:"createdAt,omitempty"`
	Id             *string                 `json:"id,omitempty"`
	Name           *string                 `json:"name,omitempty"`
	NotifyOnFail   *NotifySetting          `json:"notifyOnFail,omitempty"`
	OwnerId        *string                 `json:"ownerId,omitempty"`
	Repo           *string                 `json:"repo,omitempty"`
	ServiceDetails *Service_ServiceDetails `json:"serviceDetails,omitempty"`
	Slug           *string                 `json:"slug,omitempty"`
	Suspended      *ServiceSuspended       `json:"suspended,omitempty"`
	Suspenders     *[]SuspenderType        `json:"suspenders,omitempty"`
	Type           *ServiceType            `json:"type,omitempty"`
	UpdatedAt      *time.Time              `json:"updatedAt,omitempty"`
}

// ServiceAutoDeploy defines model for Service.AutoDeploy.
type ServiceAutoDeploy string

// Service_ServiceDetails defines model for Service.ServiceDetails.
type Service_ServiceDetails struct {
	union json.RawMessage
}

// ServiceSuspended defines model for Service.Suspended.
type ServiceSuspended string

// ServiceEnv defines model for serviceEnv.
type ServiceEnv string

// ServicePATCH defines model for servicePATCH.
type ServicePATCH struct {
	AutoDeploy     *ServicePATCHAutoDeploy      `json:"autoDeploy,omitempty"`
	Branch         *string                      `json:"branch,omitempty"`
	Name           *string                      `json:"name,omitempty"`
	ServiceDetails *ServicePATCH_ServiceDetails `json:"serviceDetails,omitempty"`
}

// ServicePATCHAutoDeploy defines model for ServicePATCH.AutoDeploy.
type ServicePATCHAutoDeploy string

// ServicePATCH_ServiceDetails defines model for ServicePATCH.ServiceDetails.
type ServicePATCH_ServiceDetails struct {
	union json.RawMessage
}

// ServicePOST defines model for servicePOST.
type ServicePOST struct {
	// AutoDeploy Defaults to "yes"
	AutoDeploy *ServicePOSTAutoDeploy `json:"autoDeploy,omitempty"`

	// Branch If left empty, this will fall back to the default branch of the repository
	Branch  *string                     `json:"branch,omitempty"`
	EnvVars *[]ServicePOST_EnvVars_Item `json:"envVars,omitempty"`
	Name    string                      `json:"name"`
	OwnerId string                      `json:"ownerId"`

	// Repo Do not include the branch in the repo string. You can instead supply a 'branch' parameter.
	Repo        string `json:"repo"`
	SecretFiles *[]struct {
		Contents string `json:"contents"`
		Name     string `json:"name"`
	} `json:"secretFiles,omitempty"`
	ServiceDetails *ServicePOST_ServiceDetails `json:"serviceDetails,omitempty"`
	Type           ServiceType                 `json:"type"`
}

// ServicePOSTAutoDeploy Defaults to "yes"
type ServicePOSTAutoDeploy string

// ServicePOST_EnvVars_Item defines model for servicePOST.envVars.Item.
type ServicePOST_EnvVars_Item struct {
	union json.RawMessage
}

// ServicePOST_ServiceDetails defines model for ServicePOST.ServiceDetails.
type ServicePOST_ServiceDetails struct {
	union json.RawMessage
}

// ServiceType defines model for serviceType.
type ServiceType string

// StaticSiteDetails defines model for staticSiteDetails.
type StaticSiteDetails struct {
	BuildCommand *string `json:"buildCommand,omitempty"`
	ParentServer *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"parentServer,omitempty"`
	PublishPath                *string                                      `json:"publishPath,omitempty"`
	PullRequestPreviewsEnabled *StaticSiteDetailsPullRequestPreviewsEnabled `json:"pullRequestPreviewsEnabled,omitempty"`
	Url                        *string                                      `json:"url,omitempty"`
}

// StaticSiteDetailsPullRequestPreviewsEnabled defines model for StaticSiteDetails.PullRequestPreviewsEnabled.
type StaticSiteDetailsPullRequestPreviewsEnabled string

// StaticSiteDetailsPATCH defines model for staticSiteDetailsPATCH.
type StaticSiteDetailsPATCH struct {
	BuildCommand               *string                                           `json:"buildCommand,omitempty"`
	PublishPath                *string                                           `json:"publishPath,omitempty"`
	PullRequestPreviewsEnabled *StaticSiteDetailsPATCHPullRequestPreviewsEnabled `json:"pullRequestPreviewsEnabled,omitempty"`
}

// StaticSiteDetailsPATCHPullRequestPreviewsEnabled defines model for StaticSiteDetailsPATCH.PullRequestPreviewsEnabled.
type StaticSiteDetailsPATCHPullRequestPreviewsEnabled string

// StaticSiteDetailsPOST defines model for staticSiteDetailsPOST.
type StaticSiteDetailsPOST struct {
	BuildCommand *string   `json:"buildCommand,omitempty"`
	Headers      *[]Header `json:"headers,omitempty"`

	// PublishPath Defaults to "public"
	PublishPath *string `json:"publishPath,omitempty"`

	// PullRequestPreviewsEnabled Defaults to "no"
	PullRequestPreviewsEnabled *StaticSiteDetailsPOSTPullRequestPreviewsEnabled `json:"pullRequestPreviewsEnabled,omitempty"`
	Routes                     *[]Route                                         `json:"routes,omitempty"`
}

// StaticSiteDetailsPOSTPullRequestPreviewsEnabled Defaults to "no"
type StaticSiteDetailsPOSTPullRequestPreviewsEnabled string

// SuspenderType defines model for suspenderType.
type SuspenderType string

// WebServiceDetails defines model for webServiceDetails.
type WebServiceDetails struct {
	Disk *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"disk,omitempty"`
	Env                *ServiceEnv                           `json:"env,omitempty"`
	EnvSpecificDetails *WebServiceDetails_EnvSpecificDetails `json:"envSpecificDetails,omitempty"`
	HealthCheckPath    *string                               `json:"healthCheckPath,omitempty"`
	NumInstances       *int                                  `json:"numInstances,omitempty"`
	OpenPorts          *[]ServerPort                         `json:"openPorts,omitempty"`
	ParentServer       *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"parentServer,omitempty"`
	Plan                       *string                                      `json:"plan,omitempty"`
	PullRequestPreviewsEnabled *WebServiceDetailsPullRequestPreviewsEnabled `json:"pullRequestPreviewsEnabled,omitempty"`
	Region                     *Region                                      `json:"region,omitempty"`
	Url                        *string                                      `json:"url,omitempty"`
}

// WebServiceDetails_EnvSpecificDetails defines model for WebServiceDetails.EnvSpecificDetails.
type WebServiceDetails_EnvSpecificDetails struct {
	union json.RawMessage
}

// WebServiceDetailsPullRequestPreviewsEnabled defines model for WebServiceDetails.PullRequestPreviewsEnabled.
type WebServiceDetailsPullRequestPreviewsEnabled string

// WebServiceDetailsPATCH defines model for webServiceDetailsPATCH.
type WebServiceDetailsPATCH struct {
	EnvSpecificDetails         *WebServiceDetailsPATCH_EnvSpecificDetails        `json:"envSpecificDetails,omitempty"`
	HealthCheckPath            *string                                           `json:"healthCheckPath,omitempty"`
	NumInstances               *int                                              `json:"numInstances,omitempty"`
	Plan                       *WebServiceDetailsPATCHPlan                       `json:"plan,omitempty"`
	PullRequestPreviewsEnabled *WebServiceDetailsPATCHPullRequestPreviewsEnabled `json:"pullRequestPreviewsEnabled,omitempty"`
}

// WebServiceDetailsPATCH_EnvSpecificDetails defines model for WebServiceDetailsPATCH.EnvSpecificDetails.
type WebServiceDetailsPATCH_EnvSpecificDetails struct {
	union json.RawMessage
}

// WebServiceDetailsPATCHPlan defines model for WebServiceDetailsPATCH.Plan.
type WebServiceDetailsPATCHPlan string

// WebServiceDetailsPATCHPullRequestPreviewsEnabled defines model for WebServiceDetailsPATCH.PullRequestPreviewsEnabled.
type WebServiceDetailsPATCHPullRequestPreviewsEnabled string

// WebServiceDetailsPOST defines model for webServiceDetailsPOST.
type WebServiceDetailsPOST struct {
	Disk *struct {
		MountPath string `json:"mountPath"`
		Name      string `json:"name"`

		// SizeGB Defaults to 1
		SizeGB *int `json:"sizeGB,omitempty"`
	} `json:"disk,omitempty"`
	Env                ServiceEnv                                `json:"env"`
	EnvSpecificDetails *WebServiceDetailsPOST_EnvSpecificDetails `json:"envSpecificDetails,omitempty"`
	HealthCheckPath    *string                                   `json:"healthCheckPath,omitempty"`

	// NumInstances Defaults to 1
	NumInstances *int `json:"numInstances,omitempty"`

	// Plan Defaults to "starter"
	Plan *WebServiceDetailsPOSTPlan `json:"plan,omitempty"`

	// PullRequestPreviewsEnabled Defaults to "no"
	PullRequestPreviewsEnabled *WebServiceDetailsPOSTPullRequestPreviewsEnabled `json:"pullRequestPreviewsEnabled,omitempty"`
	Region                     *Region                                          `json:"region,omitempty"`
}

// WebServiceDetailsPOST_EnvSpecificDetails defines model for WebServiceDetailsPOST.EnvSpecificDetails.
type WebServiceDetailsPOST_EnvSpecificDetails struct {
	union json.RawMessage
}

// WebServiceDetailsPOSTPlan Defaults to "starter"
type WebServiceDetailsPOSTPlan string

// WebServiceDetailsPOSTPullRequestPreviewsEnabled Defaults to "no"
type WebServiceDetailsPOSTPullRequestPreviewsEnabled string

// CursorParam defines model for cursorParam.
type CursorParam = []byte

// CustomDomainIdOrNameParam defines model for customDomainIdOrNameParam.
type CustomDomainIdOrNameParam = string

// DeployIdParam defines model for deployIdParam.
type DeployIdParam = string

// EndTimeParam defines model for endTimeParam.
type EndTimeParam = int

// LimitParam Defaults to 20
type LimitParam = float32

// OwnerIdParam defines model for ownerIdParam.
type OwnerIdParam = []string

// ServiceIdParam defines model for serviceIdParam.
type ServiceIdParam = string

// StartTimeParam defines model for startTimeParam.
type StartTimeParam = int

// N400BadRequest defines model for 400BadRequest.
type N400BadRequest = Error

// N401Unauthorized defines model for 401Unauthorized.
type N401Unauthorized = Error

// N402PaymentRequired defines model for 402PaymentRequired.
type N402PaymentRequired = Error

// N403Forbidden defines model for 403Forbidden.
type N403Forbidden = Error

// N404NotFound defines model for 404NotFound.
type N404NotFound = Error

// N406NotAcceptable defines model for 406NotAcceptable.
type N406NotAcceptable = Error

// N409Conflict defines model for 409Conflict.
type N409Conflict = Error

// N410Gone defines model for 410Gone.
type N410Gone = Error

// N429RateLimit defines model for 429RateLimit.
type N429RateLimit = Error

// N500InternalServerError defines model for 500InternalServerError.
type N500InternalServerError = Error

// N503ServiceUnavailable defines model for 503ServiceUnavailable.
type N503ServiceUnavailable = Error

// GetOwnersParams defines parameters for GetOwners.
type GetOwnersParams struct {
	Name  *[]string `form:"name,omitempty" json:"name,omitempty"`
	Email *[]string `form:"email,omitempty" json:"email,omitempty"`

	// Cursor Cursor to begin retrieving entries for this query
	Cursor *CursorParam `form:"cursor,omitempty" json:"cursor,omitempty"`

	// Limit Max number of items that can be returned
	Limit *LimitParam `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetServicesParams defines parameters for GetServices.
type GetServicesParams struct {
	// Name Filter for the names of services
	Name *[]string `form:"name,omitempty" json:"name,omitempty"`

	// Type Filter for types of services
	Type *[]ServiceType `form:"type,omitempty" json:"type,omitempty"`

	// Env Filter for environments of services
	Env *[]ServiceEnv `form:"env,omitempty" json:"env,omitempty"`

	// Region Filter for regions of services
	Region *[]Region `form:"region,omitempty" json:"region,omitempty"`

	// Suspended Filter services based on whether they're suspended or not suspended
	Suspended *[]GetServicesParamsSuspended `form:"suspended,omitempty" json:"suspended,omitempty"`

	// CreatedBefore Filter for services created before a certain time (specified as an ISO 8601 timestamp)
	CreatedBefore *time.Time `form:"createdBefore,omitempty" json:"createdBefore,omitempty"`

	// CreatedAfter Filter for services created after a certain time (specified as an ISO 8601 timestamp)
	CreatedAfter *time.Time `form:"createdAfter,omitempty" json:"createdAfter,omitempty"`

	// UpdatedBefore Filter for services updated before a certain time (specified as an ISO 8601 timestamp)
	UpdatedBefore *time.Time `form:"updatedBefore,omitempty" json:"updatedBefore,omitempty"`

	// UpdatedAfter Filter for services updated after a certain time (specified as an ISO 8601 timestamp)
	UpdatedAfter *time.Time `form:"updatedAfter,omitempty" json:"updatedAfter,omitempty"`

	// OwnerId The ID of the owner (team or personal user) whose resources should be returned
	OwnerId *OwnerIdParam `form:"ownerId,omitempty" json:"ownerId,omitempty"`

	// Cursor Cursor to begin retrieving entries for this query
	Cursor *CursorParam `form:"cursor,omitempty" json:"cursor,omitempty"`

	// Limit Max number of items that can be returned
	Limit *LimitParam `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetServicesParamsSuspended defines parameters for GetServices.
type GetServicesParamsSuspended string

// GetCustomDomainsParams defines parameters for GetCustomDomains.
type GetCustomDomainsParams struct {
	// Cursor Cursor to begin retrieving entries for this query
	Cursor *CursorParam `form:"cursor,omitempty" json:"cursor,omitempty"`

	// Limit Max number of items that can be returned
	Limit *LimitParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Name Filter for the names of custom domain
	Name *[]string `form:"name,omitempty" json:"name,omitempty"`

	// DomainType Filter for apex or subdomains
	DomainType *GetCustomDomainsParamsDomainType `form:"domainType,omitempty" json:"domainType,omitempty"`

	// VerificationStatus Filter for verified or unverified custom domains
	VerificationStatus *GetCustomDomainsParamsVerificationStatus `form:"verificationStatus,omitempty" json:"verificationStatus,omitempty"`

	// CreatedBefore Filter for custom domains created before a certain time (specified as an ISO 8601 timestamp)
	CreatedBefore *time.Time `form:"createdBefore,omitempty" json:"createdBefore,omitempty"`

	// CreatedAfter Filter for custom domains created after a certain time (specified as an ISO 8601 timestamp)
	CreatedAfter *time.Time `form:"createdAfter,omitempty" json:"createdAfter,omitempty"`
}

// GetCustomDomainsParamsDomainType defines parameters for GetCustomDomains.
type GetCustomDomainsParamsDomainType string

// GetCustomDomainsParamsVerificationStatus defines parameters for GetCustomDomains.
type GetCustomDomainsParamsVerificationStatus string

// CreateCustomDomainJSONBody defines parameters for CreateCustomDomain.
type CreateCustomDomainJSONBody struct {
	Name string `json:"name"`
}

// GetDeploysParams defines parameters for GetDeploys.
type GetDeploysParams struct {
	// StartTime Epoch/Unix timestamp of start of time range to return
	StartTime *StartTimeParam `form:"startTime,omitempty" json:"startTime,omitempty"`

	// EndTime Epoch/Unix timestamp of end of time range to return
	EndTime *EndTimeParam `form:"endTime,omitempty" json:"endTime,omitempty"`

	// Cursor Cursor to begin retrieving entries for this query
	Cursor *CursorParam `form:"cursor,omitempty" json:"cursor,omitempty"`

	// Limit Max number of items that can be returned
	Limit *LimitParam `form:"limit,omitempty" json:"limit,omitempty"`
}

// CreateDeployJSONBody defines parameters for CreateDeploy.
type CreateDeployJSONBody struct {
	// ClearCache Defaults to "do_not_clear"
	ClearCache *CreateDeployJSONBodyClearCache `json:"clearCache,omitempty"`
}

// CreateDeployJSONBodyClearCache defines parameters for CreateDeploy.
type CreateDeployJSONBodyClearCache string

// GetEnvVarsForServiceParams defines parameters for GetEnvVarsForService.
type GetEnvVarsForServiceParams struct {
	// Cursor Cursor to begin retrieving entries for this query
	Cursor *CursorParam `form:"cursor,omitempty" json:"cursor,omitempty"`

	// Limit Max number of items that can be returned
	Limit *LimitParam `form:"limit,omitempty" json:"limit,omitempty"`
}

// UpdateEnvVarsForServiceJSONBody defines parameters for UpdateEnvVarsForService.
type UpdateEnvVarsForServiceJSONBody = []UpdateEnvVarsForServiceJSONBody_Item

// UpdateEnvVarsForServiceJSONBody_Item defines parameters for UpdateEnvVarsForService.
type UpdateEnvVarsForServiceJSONBody_Item struct {
	union json.RawMessage
}

// GetHeadersParams defines parameters for GetHeaders.
type GetHeadersParams struct {
	// Path Filter for specific paths that headers apply to
	Path *[]string `form:"path,omitempty" json:"path,omitempty"`

	// Name Filter for header names
	Name *[]string `form:"name,omitempty" json:"name,omitempty"`

	// Value Filter for header values
	Value *[]string `form:"value,omitempty" json:"value,omitempty"`

	// Cursor Cursor to begin retrieving entries for this query
	Cursor *CursorParam `form:"cursor,omitempty" json:"cursor,omitempty"`

	// Limit Max number of items that can be returned
	Limit *LimitParam `form:"limit,omitempty" json:"limit,omitempty"`
}

// ListJobParams defines parameters for ListJob.
type ListJobParams struct {
	// Cursor Cursor to begin retrieving entries for this query
	Cursor *CursorParam `form:"cursor,omitempty" json:"cursor,omitempty"`

	// Limit Max number of items that can be returned
	Limit *LimitParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Status Filter for the status of the job (`pending`, `running`, `succeeded`, or `failed`)
	Status *[]ListJobParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// CreatedBefore Filter for jobs created before a certain time (specified as an ISO 8601 timestamp)
	CreatedBefore *time.Time `form:"createdBefore,omitempty" json:"createdBefore,omitempty"`

	// CreatedAfter Filter for jobs created after a certain time (specified as an ISO 8601 timestamp)
	CreatedAfter *time.Time `form:"createdAfter,omitempty" json:"createdAfter,omitempty"`

	// StartedBefore Filter for jobs started before a certain time (specified as an ISO 8601 timestamp)
	StartedBefore *time.Time `form:"startedBefore,omitempty" json:"startedBefore,omitempty"`

	// StartedAfter Filter for jobs started after a certain time (specified as an ISO 8601 timestamp)
	StartedAfter *time.Time `form:"startedAfter,omitempty" json:"startedAfter,omitempty"`

	// FinishedBefore Filter for jobs finished before a certain time (specified as an ISO 8601 timestamp)
	FinishedBefore *time.Time `form:"finishedBefore,omitempty" json:"finishedBefore,omitempty"`

	// FinishedAfter Filter for jobs finished after a certain time (specified as an ISO 8601 timestamp)
	FinishedAfter *time.Time `form:"finishedAfter,omitempty" json:"finishedAfter,omitempty"`
}

// ListJobParamsStatus defines parameters for ListJob.
type ListJobParamsStatus string

// PostJobJSONBody defines parameters for PostJob.
type PostJobJSONBody struct {
	PlanId       *string `json:"planId,omitempty"`
	StartCommand string  `json:"startCommand"`
}

// GetRoutesParams defines parameters for GetRoutes.
type GetRoutesParams struct {
	// Type Filter for the type of route rule
	Type *[]GetRoutesParamsType `form:"type,omitempty" json:"type,omitempty"`

	// Source Filter for the source path of the route
	Source *[]string `form:"source,omitempty" json:"source,omitempty"`

	// Destination Filter for the destination path of the route
	Destination *[]string `form:"destination,omitempty" json:"destination,omitempty"`

	// Cursor Cursor to begin retrieving entries for this query
	Cursor *CursorParam `form:"cursor,omitempty" json:"cursor,omitempty"`

	// Limit Max number of items that can be returned
	Limit *LimitParam `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetRoutesParamsType defines parameters for GetRoutes.
type GetRoutesParamsType string

// ScaleServiceJSONBody defines parameters for ScaleService.
type ScaleServiceJSONBody struct {
	NumInstances int `json:"numInstances"`
}

// CreateServiceJSONRequestBody defines body for CreateService for application/json ContentType.
type CreateServiceJSONRequestBody = ServicePOST

// UpdateServiceJSONRequestBody defines body for UpdateService for application/json ContentType.
type UpdateServiceJSONRequestBody = ServicePATCH

// CreateCustomDomainJSONRequestBody defines body for CreateCustomDomain for application/json ContentType.
type CreateCustomDomainJSONRequestBody CreateCustomDomainJSONBody

// CreateDeployJSONRequestBody defines body for CreateDeploy for application/json ContentType.
type CreateDeployJSONRequestBody CreateDeployJSONBody

// UpdateEnvVarsForServiceJSONRequestBody defines body for UpdateEnvVarsForService for application/json ContentType.
type UpdateEnvVarsForServiceJSONRequestBody = UpdateEnvVarsForServiceJSONBody

// PostJobJSONRequestBody defines body for PostJob for application/json ContentType.
type PostJobJSONRequestBody PostJobJSONBody

// ScaleServiceJSONRequestBody defines body for ScaleService for application/json ContentType.
type ScaleServiceJSONRequestBody ScaleServiceJSONBody

// AsDockerDetails returns the union data inside the BackgroundWorkerDetails_EnvSpecificDetails as a DockerDetails
func (t BackgroundWorkerDetails_EnvSpecificDetails) AsDockerDetails() (DockerDetails, error) {
	var body DockerDetails
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDockerDetails overwrites any union data inside the BackgroundWorkerDetails_EnvSpecificDetails as the provided DockerDetails
func (t *BackgroundWorkerDetails_EnvSpecificDetails) FromDockerDetails(v DockerDetails) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDockerDetails performs a merge with any union data inside the BackgroundWorkerDetails_EnvSpecificDetails, using the provided DockerDetails
func (t *BackgroundWorkerDetails_EnvSpecificDetails) MergeDockerDetails(v DockerDetails) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNativeEnvironmentDetails returns the union data inside the BackgroundWorkerDetails_EnvSpecificDetails as a NativeEnvironmentDetails
func (t BackgroundWorkerDetails_EnvSpecificDetails) AsNativeEnvironmentDetails() (NativeEnvironmentDetails, error) {
	var body NativeEnvironmentDetails
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNativeEnvironmentDetails overwrites any union data inside the BackgroundWorkerDetails_EnvSpecificDetails as the provided NativeEnvironmentDetails
func (t *BackgroundWorkerDetails_EnvSpecificDetails) FromNativeEnvironmentDetails(v NativeEnvironmentDetails) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNativeEnvironmentDetails performs a merge with any union data inside the BackgroundWorkerDetails_EnvSpecificDetails, using the provided NativeEnvironmentDetails
func (t *BackgroundWorkerDetails_EnvSpecificDetails) MergeNativeEnvironmentDetails(v NativeEnvironmentDetails) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t BackgroundWorkerDetails_EnvSpecificDetails) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *BackgroundWorkerDetails_EnvSpecificDetails) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDockerDetailsPATCH returns the union data inside the BackgroundWorkerDetailsPATCH_EnvSpecificDetails as a DockerDetailsPATCH
func (t BackgroundWorkerDetailsPATCH_EnvSpecificDetails) AsDockerDetailsPATCH() (DockerDetailsPATCH, error) {
	var body DockerDetailsPATCH
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDockerDetailsPATCH overwrites any union data inside the BackgroundWorkerDetailsPATCH_EnvSpecificDetails as the provided DockerDetailsPATCH
func (t *BackgroundWorkerDetailsPATCH_EnvSpecificDetails) FromDockerDetailsPATCH(v DockerDetailsPATCH) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDockerDetailsPATCH performs a merge with any union data inside the BackgroundWorkerDetailsPATCH_EnvSpecificDetails, using the provided DockerDetailsPATCH
func (t *BackgroundWorkerDetailsPATCH_EnvSpecificDetails) MergeDockerDetailsPATCH(v DockerDetailsPATCH) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNativeEnvironmentDetailsPATCH returns the union data inside the BackgroundWorkerDetailsPATCH_EnvSpecificDetails as a NativeEnvironmentDetailsPATCH
func (t BackgroundWorkerDetailsPATCH_EnvSpecificDetails) AsNativeEnvironmentDetailsPATCH() (NativeEnvironmentDetailsPATCH, error) {
	var body NativeEnvironmentDetailsPATCH
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNativeEnvironmentDetailsPATCH overwrites any union data inside the BackgroundWorkerDetailsPATCH_EnvSpecificDetails as the provided NativeEnvironmentDetailsPATCH
func (t *BackgroundWorkerDetailsPATCH_EnvSpecificDetails) FromNativeEnvironmentDetailsPATCH(v NativeEnvironmentDetailsPATCH) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNativeEnvironmentDetailsPATCH performs a merge with any union data inside the BackgroundWorkerDetailsPATCH_EnvSpecificDetails, using the provided NativeEnvironmentDetailsPATCH
func (t *BackgroundWorkerDetailsPATCH_EnvSpecificDetails) MergeNativeEnvironmentDetailsPATCH(v NativeEnvironmentDetailsPATCH) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t BackgroundWorkerDetailsPATCH_EnvSpecificDetails) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *BackgroundWorkerDetailsPATCH_EnvSpecificDetails) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDockerDetailsPOST returns the union data inside the BackgroundWorkerDetailsPOST_EnvSpecificDetails as a DockerDetailsPOST
func (t BackgroundWorkerDetailsPOST_EnvSpecificDetails) AsDockerDetailsPOST() (DockerDetailsPOST, error) {
	var body DockerDetailsPOST
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDockerDetailsPOST overwrites any union data inside the BackgroundWorkerDetailsPOST_EnvSpecificDetails as the provided DockerDetailsPOST
func (t *BackgroundWorkerDetailsPOST_EnvSpecificDetails) FromDockerDetailsPOST(v DockerDetailsPOST) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDockerDetailsPOST performs a merge with any union data inside the BackgroundWorkerDetailsPOST_EnvSpecificDetails, using the provided DockerDetailsPOST
func (t *BackgroundWorkerDetailsPOST_EnvSpecificDetails) MergeDockerDetailsPOST(v DockerDetailsPOST) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNativeEnvironmentDetailsPOST returns the union data inside the BackgroundWorkerDetailsPOST_EnvSpecificDetails as a NativeEnvironmentDetailsPOST
func (t BackgroundWorkerDetailsPOST_EnvSpecificDetails) AsNativeEnvironmentDetailsPOST() (NativeEnvironmentDetailsPOST, error) {
	var body NativeEnvironmentDetailsPOST
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNativeEnvironmentDetailsPOST overwrites any union data inside the BackgroundWorkerDetailsPOST_EnvSpecificDetails as the provided NativeEnvironmentDetailsPOST
func (t *BackgroundWorkerDetailsPOST_EnvSpecificDetails) FromNativeEnvironmentDetailsPOST(v NativeEnvironmentDetailsPOST) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNativeEnvironmentDetailsPOST performs a merge with any union data inside the BackgroundWorkerDetailsPOST_EnvSpecificDetails, using the provided NativeEnvironmentDetailsPOST
func (t *BackgroundWorkerDetailsPOST_EnvSpecificDetails) MergeNativeEnvironmentDetailsPOST(v NativeEnvironmentDetailsPOST) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t BackgroundWorkerDetailsPOST_EnvSpecificDetails) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *BackgroundWorkerDetailsPOST_EnvSpecificDetails) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDockerDetails returns the union data inside the CronJobDetails_EnvSpecificDetails as a DockerDetails
func (t CronJobDetails_EnvSpecificDetails) AsDockerDetails() (DockerDetails, error) {
	var body DockerDetails
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDockerDetails overwrites any union data inside the CronJobDetails_EnvSpecificDetails as the provided DockerDetails
func (t *CronJobDetails_EnvSpecificDetails) FromDockerDetails(v DockerDetails) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDockerDetails performs a merge with any union data inside the CronJobDetails_EnvSpecificDetails, using the provided DockerDetails
func (t *CronJobDetails_EnvSpecificDetails) MergeDockerDetails(v DockerDetails) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNativeEnvironmentDetails returns the union data inside the CronJobDetails_EnvSpecificDetails as a NativeEnvironmentDetails
func (t CronJobDetails_EnvSpecificDetails) AsNativeEnvironmentDetails() (NativeEnvironmentDetails, error) {
	var body NativeEnvironmentDetails
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNativeEnvironmentDetails overwrites any union data inside the CronJobDetails_EnvSpecificDetails as the provided NativeEnvironmentDetails
func (t *CronJobDetails_EnvSpecificDetails) FromNativeEnvironmentDetails(v NativeEnvironmentDetails) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNativeEnvironmentDetails performs a merge with any union data inside the CronJobDetails_EnvSpecificDetails, using the provided NativeEnvironmentDetails
func (t *CronJobDetails_EnvSpecificDetails) MergeNativeEnvironmentDetails(v NativeEnvironmentDetails) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t CronJobDetails_EnvSpecificDetails) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CronJobDetails_EnvSpecificDetails) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDockerDetailsPATCH returns the union data inside the CronJobDetailsPATCH_EnvSpecificDetails as a DockerDetailsPATCH
func (t CronJobDetailsPATCH_EnvSpecificDetails) AsDockerDetailsPATCH() (DockerDetailsPATCH, error) {
	var body DockerDetailsPATCH
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDockerDetailsPATCH overwrites any union data inside the CronJobDetailsPATCH_EnvSpecificDetails as the provided DockerDetailsPATCH
func (t *CronJobDetailsPATCH_EnvSpecificDetails) FromDockerDetailsPATCH(v DockerDetailsPATCH) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDockerDetailsPATCH performs a merge with any union data inside the CronJobDetailsPATCH_EnvSpecificDetails, using the provided DockerDetailsPATCH
func (t *CronJobDetailsPATCH_EnvSpecificDetails) MergeDockerDetailsPATCH(v DockerDetailsPATCH) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNativeEnvironmentDetailsPATCH returns the union data inside the CronJobDetailsPATCH_EnvSpecificDetails as a NativeEnvironmentDetailsPATCH
func (t CronJobDetailsPATCH_EnvSpecificDetails) AsNativeEnvironmentDetailsPATCH() (NativeEnvironmentDetailsPATCH, error) {
	var body NativeEnvironmentDetailsPATCH
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNativeEnvironmentDetailsPATCH overwrites any union data inside the CronJobDetailsPATCH_EnvSpecificDetails as the provided NativeEnvironmentDetailsPATCH
func (t *CronJobDetailsPATCH_EnvSpecificDetails) FromNativeEnvironmentDetailsPATCH(v NativeEnvironmentDetailsPATCH) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNativeEnvironmentDetailsPATCH performs a merge with any union data inside the CronJobDetailsPATCH_EnvSpecificDetails, using the provided NativeEnvironmentDetailsPATCH
func (t *CronJobDetailsPATCH_EnvSpecificDetails) MergeNativeEnvironmentDetailsPATCH(v NativeEnvironmentDetailsPATCH) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t CronJobDetailsPATCH_EnvSpecificDetails) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CronJobDetailsPATCH_EnvSpecificDetails) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDockerDetailsPOST returns the union data inside the CronJobDetailsPOST_EnvSpecificDetails as a DockerDetailsPOST
func (t CronJobDetailsPOST_EnvSpecificDetails) AsDockerDetailsPOST() (DockerDetailsPOST, error) {
	var body DockerDetailsPOST
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDockerDetailsPOST overwrites any union data inside the CronJobDetailsPOST_EnvSpecificDetails as the provided DockerDetailsPOST
func (t *CronJobDetailsPOST_EnvSpecificDetails) FromDockerDetailsPOST(v DockerDetailsPOST) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDockerDetailsPOST performs a merge with any union data inside the CronJobDetailsPOST_EnvSpecificDetails, using the provided DockerDetailsPOST
func (t *CronJobDetailsPOST_EnvSpecificDetails) MergeDockerDetailsPOST(v DockerDetailsPOST) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNativeEnvironmentDetailsPOST returns the union data inside the CronJobDetailsPOST_EnvSpecificDetails as a NativeEnvironmentDetailsPOST
func (t CronJobDetailsPOST_EnvSpecificDetails) AsNativeEnvironmentDetailsPOST() (NativeEnvironmentDetailsPOST, error) {
	var body NativeEnvironmentDetailsPOST
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNativeEnvironmentDetailsPOST overwrites any union data inside the CronJobDetailsPOST_EnvSpecificDetails as the provided NativeEnvironmentDetailsPOST
func (t *CronJobDetailsPOST_EnvSpecificDetails) FromNativeEnvironmentDetailsPOST(v NativeEnvironmentDetailsPOST) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNativeEnvironmentDetailsPOST performs a merge with any union data inside the CronJobDetailsPOST_EnvSpecificDetails, using the provided NativeEnvironmentDetailsPOST
func (t *CronJobDetailsPOST_EnvSpecificDetails) MergeNativeEnvironmentDetailsPOST(v NativeEnvironmentDetailsPOST) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t CronJobDetailsPOST_EnvSpecificDetails) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CronJobDetailsPOST_EnvSpecificDetails) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDockerDetails returns the union data inside the PrivateServiceDetails_EnvSpecificDetails as a DockerDetails
func (t PrivateServiceDetails_EnvSpecificDetails) AsDockerDetails() (DockerDetails, error) {
	var body DockerDetails
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDockerDetails overwrites any union data inside the PrivateServiceDetails_EnvSpecificDetails as the provided DockerDetails
func (t *PrivateServiceDetails_EnvSpecificDetails) FromDockerDetails(v DockerDetails) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDockerDetails performs a merge with any union data inside the PrivateServiceDetails_EnvSpecificDetails, using the provided DockerDetails
func (t *PrivateServiceDetails_EnvSpecificDetails) MergeDockerDetails(v DockerDetails) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNativeEnvironmentDetails returns the union data inside the PrivateServiceDetails_EnvSpecificDetails as a NativeEnvironmentDetails
func (t PrivateServiceDetails_EnvSpecificDetails) AsNativeEnvironmentDetails() (NativeEnvironmentDetails, error) {
	var body NativeEnvironmentDetails
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNativeEnvironmentDetails overwrites any union data inside the PrivateServiceDetails_EnvSpecificDetails as the provided NativeEnvironmentDetails
func (t *PrivateServiceDetails_EnvSpecificDetails) FromNativeEnvironmentDetails(v NativeEnvironmentDetails) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNativeEnvironmentDetails performs a merge with any union data inside the PrivateServiceDetails_EnvSpecificDetails, using the provided NativeEnvironmentDetails
func (t *PrivateServiceDetails_EnvSpecificDetails) MergeNativeEnvironmentDetails(v NativeEnvironmentDetails) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t PrivateServiceDetails_EnvSpecificDetails) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PrivateServiceDetails_EnvSpecificDetails) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDockerDetailsPATCH returns the union data inside the PrivateServiceDetailsPATCH_EnvSpecificDetails as a DockerDetailsPATCH
func (t PrivateServiceDetailsPATCH_EnvSpecificDetails) AsDockerDetailsPATCH() (DockerDetailsPATCH, error) {
	var body DockerDetailsPATCH
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDockerDetailsPATCH overwrites any union data inside the PrivateServiceDetailsPATCH_EnvSpecificDetails as the provided DockerDetailsPATCH
func (t *PrivateServiceDetailsPATCH_EnvSpecificDetails) FromDockerDetailsPATCH(v DockerDetailsPATCH) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDockerDetailsPATCH performs a merge with any union data inside the PrivateServiceDetailsPATCH_EnvSpecificDetails, using the provided DockerDetailsPATCH
func (t *PrivateServiceDetailsPATCH_EnvSpecificDetails) MergeDockerDetailsPATCH(v DockerDetailsPATCH) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNativeEnvironmentDetailsPATCH returns the union data inside the PrivateServiceDetailsPATCH_EnvSpecificDetails as a NativeEnvironmentDetailsPATCH
func (t PrivateServiceDetailsPATCH_EnvSpecificDetails) AsNativeEnvironmentDetailsPATCH() (NativeEnvironmentDetailsPATCH, error) {
	var body NativeEnvironmentDetailsPATCH
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNativeEnvironmentDetailsPATCH overwrites any union data inside the PrivateServiceDetailsPATCH_EnvSpecificDetails as the provided NativeEnvironmentDetailsPATCH
func (t *PrivateServiceDetailsPATCH_EnvSpecificDetails) FromNativeEnvironmentDetailsPATCH(v NativeEnvironmentDetailsPATCH) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNativeEnvironmentDetailsPATCH performs a merge with any union data inside the PrivateServiceDetailsPATCH_EnvSpecificDetails, using the provided NativeEnvironmentDetailsPATCH
func (t *PrivateServiceDetailsPATCH_EnvSpecificDetails) MergeNativeEnvironmentDetailsPATCH(v NativeEnvironmentDetailsPATCH) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t PrivateServiceDetailsPATCH_EnvSpecificDetails) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PrivateServiceDetailsPATCH_EnvSpecificDetails) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDockerDetailsPOST returns the union data inside the PrivateServiceDetailsPOST_EnvSpecificDetails as a DockerDetailsPOST
func (t PrivateServiceDetailsPOST_EnvSpecificDetails) AsDockerDetailsPOST() (DockerDetailsPOST, error) {
	var body DockerDetailsPOST
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDockerDetailsPOST overwrites any union data inside the PrivateServiceDetailsPOST_EnvSpecificDetails as the provided DockerDetailsPOST
func (t *PrivateServiceDetailsPOST_EnvSpecificDetails) FromDockerDetailsPOST(v DockerDetailsPOST) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDockerDetailsPOST performs a merge with any union data inside the PrivateServiceDetailsPOST_EnvSpecificDetails, using the provided DockerDetailsPOST
func (t *PrivateServiceDetailsPOST_EnvSpecificDetails) MergeDockerDetailsPOST(v DockerDetailsPOST) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNativeEnvironmentDetailsPOST returns the union data inside the PrivateServiceDetailsPOST_EnvSpecificDetails as a NativeEnvironmentDetailsPOST
func (t PrivateServiceDetailsPOST_EnvSpecificDetails) AsNativeEnvironmentDetailsPOST() (NativeEnvironmentDetailsPOST, error) {
	var body NativeEnvironmentDetailsPOST
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNativeEnvironmentDetailsPOST overwrites any union data inside the PrivateServiceDetailsPOST_EnvSpecificDetails as the provided NativeEnvironmentDetailsPOST
func (t *PrivateServiceDetailsPOST_EnvSpecificDetails) FromNativeEnvironmentDetailsPOST(v NativeEnvironmentDetailsPOST) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNativeEnvironmentDetailsPOST performs a merge with any union data inside the PrivateServiceDetailsPOST_EnvSpecificDetails, using the provided NativeEnvironmentDetailsPOST
func (t *PrivateServiceDetailsPOST_EnvSpecificDetails) MergeNativeEnvironmentDetailsPOST(v NativeEnvironmentDetailsPOST) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t PrivateServiceDetailsPOST_EnvSpecificDetails) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PrivateServiceDetailsPOST_EnvSpecificDetails) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStaticSiteDetails returns the union data inside the Service_ServiceDetails as a StaticSiteDetails
func (t Service_ServiceDetails) AsStaticSiteDetails() (StaticSiteDetails, error) {
	var body StaticSiteDetails
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStaticSiteDetails overwrites any union data inside the Service_ServiceDetails as the provided StaticSiteDetails
func (t *Service_ServiceDetails) FromStaticSiteDetails(v StaticSiteDetails) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStaticSiteDetails performs a merge with any union data inside the Service_ServiceDetails, using the provided StaticSiteDetails
func (t *Service_ServiceDetails) MergeStaticSiteDetails(v StaticSiteDetails) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsWebServiceDetails returns the union data inside the Service_ServiceDetails as a WebServiceDetails
func (t Service_ServiceDetails) AsWebServiceDetails() (WebServiceDetails, error) {
	var body WebServiceDetails
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWebServiceDetails overwrites any union data inside the Service_ServiceDetails as the provided WebServiceDetails
func (t *Service_ServiceDetails) FromWebServiceDetails(v WebServiceDetails) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWebServiceDetails performs a merge with any union data inside the Service_ServiceDetails, using the provided WebServiceDetails
func (t *Service_ServiceDetails) MergeWebServiceDetails(v WebServiceDetails) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsPrivateServiceDetails returns the union data inside the Service_ServiceDetails as a PrivateServiceDetails
func (t Service_ServiceDetails) AsPrivateServiceDetails() (PrivateServiceDetails, error) {
	var body PrivateServiceDetails
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPrivateServiceDetails overwrites any union data inside the Service_ServiceDetails as the provided PrivateServiceDetails
func (t *Service_ServiceDetails) FromPrivateServiceDetails(v PrivateServiceDetails) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePrivateServiceDetails performs a merge with any union data inside the Service_ServiceDetails, using the provided PrivateServiceDetails
func (t *Service_ServiceDetails) MergePrivateServiceDetails(v PrivateServiceDetails) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsBackgroundWorkerDetails returns the union data inside the Service_ServiceDetails as a BackgroundWorkerDetails
func (t Service_ServiceDetails) AsBackgroundWorkerDetails() (BackgroundWorkerDetails, error) {
	var body BackgroundWorkerDetails
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBackgroundWorkerDetails overwrites any union data inside the Service_ServiceDetails as the provided BackgroundWorkerDetails
func (t *Service_ServiceDetails) FromBackgroundWorkerDetails(v BackgroundWorkerDetails) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBackgroundWorkerDetails performs a merge with any union data inside the Service_ServiceDetails, using the provided BackgroundWorkerDetails
func (t *Service_ServiceDetails) MergeBackgroundWorkerDetails(v BackgroundWorkerDetails) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsCronJobDetails returns the union data inside the Service_ServiceDetails as a CronJobDetails
func (t Service_ServiceDetails) AsCronJobDetails() (CronJobDetails, error) {
	var body CronJobDetails
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCronJobDetails overwrites any union data inside the Service_ServiceDetails as the provided CronJobDetails
func (t *Service_ServiceDetails) FromCronJobDetails(v CronJobDetails) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCronJobDetails performs a merge with any union data inside the Service_ServiceDetails, using the provided CronJobDetails
func (t *Service_ServiceDetails) MergeCronJobDetails(v CronJobDetails) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t Service_ServiceDetails) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Service_ServiceDetails) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStaticSiteDetailsPATCH returns the union data inside the ServicePATCH_ServiceDetails as a StaticSiteDetailsPATCH
func (t ServicePATCH_ServiceDetails) AsStaticSiteDetailsPATCH() (StaticSiteDetailsPATCH, error) {
	var body StaticSiteDetailsPATCH
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStaticSiteDetailsPATCH overwrites any union data inside the ServicePATCH_ServiceDetails as the provided StaticSiteDetailsPATCH
func (t *ServicePATCH_ServiceDetails) FromStaticSiteDetailsPATCH(v StaticSiteDetailsPATCH) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStaticSiteDetailsPATCH performs a merge with any union data inside the ServicePATCH_ServiceDetails, using the provided StaticSiteDetailsPATCH
func (t *ServicePATCH_ServiceDetails) MergeStaticSiteDetailsPATCH(v StaticSiteDetailsPATCH) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsWebServiceDetailsPATCH returns the union data inside the ServicePATCH_ServiceDetails as a WebServiceDetailsPATCH
func (t ServicePATCH_ServiceDetails) AsWebServiceDetailsPATCH() (WebServiceDetailsPATCH, error) {
	var body WebServiceDetailsPATCH
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWebServiceDetailsPATCH overwrites any union data inside the ServicePATCH_ServiceDetails as the provided WebServiceDetailsPATCH
func (t *ServicePATCH_ServiceDetails) FromWebServiceDetailsPATCH(v WebServiceDetailsPATCH) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWebServiceDetailsPATCH performs a merge with any union data inside the ServicePATCH_ServiceDetails, using the provided WebServiceDetailsPATCH
func (t *ServicePATCH_ServiceDetails) MergeWebServiceDetailsPATCH(v WebServiceDetailsPATCH) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsPrivateServiceDetailsPATCH returns the union data inside the ServicePATCH_ServiceDetails as a PrivateServiceDetailsPATCH
func (t ServicePATCH_ServiceDetails) AsPrivateServiceDetailsPATCH() (PrivateServiceDetailsPATCH, error) {
	var body PrivateServiceDetailsPATCH
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPrivateServiceDetailsPATCH overwrites any union data inside the ServicePATCH_ServiceDetails as the provided PrivateServiceDetailsPATCH
func (t *ServicePATCH_ServiceDetails) FromPrivateServiceDetailsPATCH(v PrivateServiceDetailsPATCH) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePrivateServiceDetailsPATCH performs a merge with any union data inside the ServicePATCH_ServiceDetails, using the provided PrivateServiceDetailsPATCH
func (t *ServicePATCH_ServiceDetails) MergePrivateServiceDetailsPATCH(v PrivateServiceDetailsPATCH) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsBackgroundWorkerDetailsPATCH returns the union data inside the ServicePATCH_ServiceDetails as a BackgroundWorkerDetailsPATCH
func (t ServicePATCH_ServiceDetails) AsBackgroundWorkerDetailsPATCH() (BackgroundWorkerDetailsPATCH, error) {
	var body BackgroundWorkerDetailsPATCH
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBackgroundWorkerDetailsPATCH overwrites any union data inside the ServicePATCH_ServiceDetails as the provided BackgroundWorkerDetailsPATCH
func (t *ServicePATCH_ServiceDetails) FromBackgroundWorkerDetailsPATCH(v BackgroundWorkerDetailsPATCH) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBackgroundWorkerDetailsPATCH performs a merge with any union data inside the ServicePATCH_ServiceDetails, using the provided BackgroundWorkerDetailsPATCH
func (t *ServicePATCH_ServiceDetails) MergeBackgroundWorkerDetailsPATCH(v BackgroundWorkerDetailsPATCH) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsCronJobDetailsPATCH returns the union data inside the ServicePATCH_ServiceDetails as a CronJobDetailsPATCH
func (t ServicePATCH_ServiceDetails) AsCronJobDetailsPATCH() (CronJobDetailsPATCH, error) {
	var body CronJobDetailsPATCH
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCronJobDetailsPATCH overwrites any union data inside the ServicePATCH_ServiceDetails as the provided CronJobDetailsPATCH
func (t *ServicePATCH_ServiceDetails) FromCronJobDetailsPATCH(v CronJobDetailsPATCH) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCronJobDetailsPATCH performs a merge with any union data inside the ServicePATCH_ServiceDetails, using the provided CronJobDetailsPATCH
func (t *ServicePATCH_ServiceDetails) MergeCronJobDetailsPATCH(v CronJobDetailsPATCH) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t ServicePATCH_ServiceDetails) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ServicePATCH_ServiceDetails) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEnvVarKeyValue returns the union data inside the ServicePOST_EnvVars_Item as a EnvVarKeyValue
func (t ServicePOST_EnvVars_Item) AsEnvVarKeyValue() (EnvVarKeyValue, error) {
	var body EnvVarKeyValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEnvVarKeyValue overwrites any union data inside the ServicePOST_EnvVars_Item as the provided EnvVarKeyValue
func (t *ServicePOST_EnvVars_Item) FromEnvVarKeyValue(v EnvVarKeyValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEnvVarKeyValue performs a merge with any union data inside the ServicePOST_EnvVars_Item, using the provided EnvVarKeyValue
func (t *ServicePOST_EnvVars_Item) MergeEnvVarKeyValue(v EnvVarKeyValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsEnvVarKeyGenerateValue returns the union data inside the ServicePOST_EnvVars_Item as a EnvVarKeyGenerateValue
func (t ServicePOST_EnvVars_Item) AsEnvVarKeyGenerateValue() (EnvVarKeyGenerateValue, error) {
	var body EnvVarKeyGenerateValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEnvVarKeyGenerateValue overwrites any union data inside the ServicePOST_EnvVars_Item as the provided EnvVarKeyGenerateValue
func (t *ServicePOST_EnvVars_Item) FromEnvVarKeyGenerateValue(v EnvVarKeyGenerateValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEnvVarKeyGenerateValue performs a merge with any union data inside the ServicePOST_EnvVars_Item, using the provided EnvVarKeyGenerateValue
func (t *ServicePOST_EnvVars_Item) MergeEnvVarKeyGenerateValue(v EnvVarKeyGenerateValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t ServicePOST_EnvVars_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ServicePOST_EnvVars_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStaticSiteDetailsPOST returns the union data inside the ServicePOST_ServiceDetails as a StaticSiteDetailsPOST
func (t ServicePOST_ServiceDetails) AsStaticSiteDetailsPOST() (StaticSiteDetailsPOST, error) {
	var body StaticSiteDetailsPOST
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStaticSiteDetailsPOST overwrites any union data inside the ServicePOST_ServiceDetails as the provided StaticSiteDetailsPOST
func (t *ServicePOST_ServiceDetails) FromStaticSiteDetailsPOST(v StaticSiteDetailsPOST) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStaticSiteDetailsPOST performs a merge with any union data inside the ServicePOST_ServiceDetails, using the provided StaticSiteDetailsPOST
func (t *ServicePOST_ServiceDetails) MergeStaticSiteDetailsPOST(v StaticSiteDetailsPOST) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsWebServiceDetailsPOST returns the union data inside the ServicePOST_ServiceDetails as a WebServiceDetailsPOST
func (t ServicePOST_ServiceDetails) AsWebServiceDetailsPOST() (WebServiceDetailsPOST, error) {
	var body WebServiceDetailsPOST
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWebServiceDetailsPOST overwrites any union data inside the ServicePOST_ServiceDetails as the provided WebServiceDetailsPOST
func (t *ServicePOST_ServiceDetails) FromWebServiceDetailsPOST(v WebServiceDetailsPOST) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWebServiceDetailsPOST performs a merge with any union data inside the ServicePOST_ServiceDetails, using the provided WebServiceDetailsPOST
func (t *ServicePOST_ServiceDetails) MergeWebServiceDetailsPOST(v WebServiceDetailsPOST) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsPrivateServiceDetailsPOST returns the union data inside the ServicePOST_ServiceDetails as a PrivateServiceDetailsPOST
func (t ServicePOST_ServiceDetails) AsPrivateServiceDetailsPOST() (PrivateServiceDetailsPOST, error) {
	var body PrivateServiceDetailsPOST
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPrivateServiceDetailsPOST overwrites any union data inside the ServicePOST_ServiceDetails as the provided PrivateServiceDetailsPOST
func (t *ServicePOST_ServiceDetails) FromPrivateServiceDetailsPOST(v PrivateServiceDetailsPOST) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePrivateServiceDetailsPOST performs a merge with any union data inside the ServicePOST_ServiceDetails, using the provided PrivateServiceDetailsPOST
func (t *ServicePOST_ServiceDetails) MergePrivateServiceDetailsPOST(v PrivateServiceDetailsPOST) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsBackgroundWorkerDetailsPOST returns the union data inside the ServicePOST_ServiceDetails as a BackgroundWorkerDetailsPOST
func (t ServicePOST_ServiceDetails) AsBackgroundWorkerDetailsPOST() (BackgroundWorkerDetailsPOST, error) {
	var body BackgroundWorkerDetailsPOST
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBackgroundWorkerDetailsPOST overwrites any union data inside the ServicePOST_ServiceDetails as the provided BackgroundWorkerDetailsPOST
func (t *ServicePOST_ServiceDetails) FromBackgroundWorkerDetailsPOST(v BackgroundWorkerDetailsPOST) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBackgroundWorkerDetailsPOST performs a merge with any union data inside the ServicePOST_ServiceDetails, using the provided BackgroundWorkerDetailsPOST
func (t *ServicePOST_ServiceDetails) MergeBackgroundWorkerDetailsPOST(v BackgroundWorkerDetailsPOST) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsCronJobDetailsPOST returns the union data inside the ServicePOST_ServiceDetails as a CronJobDetailsPOST
func (t ServicePOST_ServiceDetails) AsCronJobDetailsPOST() (CronJobDetailsPOST, error) {
	var body CronJobDetailsPOST
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCronJobDetailsPOST overwrites any union data inside the ServicePOST_ServiceDetails as the provided CronJobDetailsPOST
func (t *ServicePOST_ServiceDetails) FromCronJobDetailsPOST(v CronJobDetailsPOST) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCronJobDetailsPOST performs a merge with any union data inside the ServicePOST_ServiceDetails, using the provided CronJobDetailsPOST
func (t *ServicePOST_ServiceDetails) MergeCronJobDetailsPOST(v CronJobDetailsPOST) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t ServicePOST_ServiceDetails) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ServicePOST_ServiceDetails) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDockerDetails returns the union data inside the WebServiceDetails_EnvSpecificDetails as a DockerDetails
func (t WebServiceDetails_EnvSpecificDetails) AsDockerDetails() (DockerDetails, error) {
	var body DockerDetails
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDockerDetails overwrites any union data inside the WebServiceDetails_EnvSpecificDetails as the provided DockerDetails
func (t *WebServiceDetails_EnvSpecificDetails) FromDockerDetails(v DockerDetails) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDockerDetails performs a merge with any union data inside the WebServiceDetails_EnvSpecificDetails, using the provided DockerDetails
func (t *WebServiceDetails_EnvSpecificDetails) MergeDockerDetails(v DockerDetails) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNativeEnvironmentDetails returns the union data inside the WebServiceDetails_EnvSpecificDetails as a NativeEnvironmentDetails
func (t WebServiceDetails_EnvSpecificDetails) AsNativeEnvironmentDetails() (NativeEnvironmentDetails, error) {
	var body NativeEnvironmentDetails
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNativeEnvironmentDetails overwrites any union data inside the WebServiceDetails_EnvSpecificDetails as the provided NativeEnvironmentDetails
func (t *WebServiceDetails_EnvSpecificDetails) FromNativeEnvironmentDetails(v NativeEnvironmentDetails) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNativeEnvironmentDetails performs a merge with any union data inside the WebServiceDetails_EnvSpecificDetails, using the provided NativeEnvironmentDetails
func (t *WebServiceDetails_EnvSpecificDetails) MergeNativeEnvironmentDetails(v NativeEnvironmentDetails) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t WebServiceDetails_EnvSpecificDetails) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *WebServiceDetails_EnvSpecificDetails) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDockerDetailsPATCH returns the union data inside the WebServiceDetailsPATCH_EnvSpecificDetails as a DockerDetailsPATCH
func (t WebServiceDetailsPATCH_EnvSpecificDetails) AsDockerDetailsPATCH() (DockerDetailsPATCH, error) {
	var body DockerDetailsPATCH
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDockerDetailsPATCH overwrites any union data inside the WebServiceDetailsPATCH_EnvSpecificDetails as the provided DockerDetailsPATCH
func (t *WebServiceDetailsPATCH_EnvSpecificDetails) FromDockerDetailsPATCH(v DockerDetailsPATCH) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDockerDetailsPATCH performs a merge with any union data inside the WebServiceDetailsPATCH_EnvSpecificDetails, using the provided DockerDetailsPATCH
func (t *WebServiceDetailsPATCH_EnvSpecificDetails) MergeDockerDetailsPATCH(v DockerDetailsPATCH) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNativeEnvironmentDetailsPATCH returns the union data inside the WebServiceDetailsPATCH_EnvSpecificDetails as a NativeEnvironmentDetailsPATCH
func (t WebServiceDetailsPATCH_EnvSpecificDetails) AsNativeEnvironmentDetailsPATCH() (NativeEnvironmentDetailsPATCH, error) {
	var body NativeEnvironmentDetailsPATCH
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNativeEnvironmentDetailsPATCH overwrites any union data inside the WebServiceDetailsPATCH_EnvSpecificDetails as the provided NativeEnvironmentDetailsPATCH
func (t *WebServiceDetailsPATCH_EnvSpecificDetails) FromNativeEnvironmentDetailsPATCH(v NativeEnvironmentDetailsPATCH) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNativeEnvironmentDetailsPATCH performs a merge with any union data inside the WebServiceDetailsPATCH_EnvSpecificDetails, using the provided NativeEnvironmentDetailsPATCH
func (t *WebServiceDetailsPATCH_EnvSpecificDetails) MergeNativeEnvironmentDetailsPATCH(v NativeEnvironmentDetailsPATCH) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t WebServiceDetailsPATCH_EnvSpecificDetails) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *WebServiceDetailsPATCH_EnvSpecificDetails) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDockerDetailsPOST returns the union data inside the WebServiceDetailsPOST_EnvSpecificDetails as a DockerDetailsPOST
func (t WebServiceDetailsPOST_EnvSpecificDetails) AsDockerDetailsPOST() (DockerDetailsPOST, error) {
	var body DockerDetailsPOST
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDockerDetailsPOST overwrites any union data inside the WebServiceDetailsPOST_EnvSpecificDetails as the provided DockerDetailsPOST
func (t *WebServiceDetailsPOST_EnvSpecificDetails) FromDockerDetailsPOST(v DockerDetailsPOST) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDockerDetailsPOST performs a merge with any union data inside the WebServiceDetailsPOST_EnvSpecificDetails, using the provided DockerDetailsPOST
func (t *WebServiceDetailsPOST_EnvSpecificDetails) MergeDockerDetailsPOST(v DockerDetailsPOST) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNativeEnvironmentDetailsPOST returns the union data inside the WebServiceDetailsPOST_EnvSpecificDetails as a NativeEnvironmentDetailsPOST
func (t WebServiceDetailsPOST_EnvSpecificDetails) AsNativeEnvironmentDetailsPOST() (NativeEnvironmentDetailsPOST, error) {
	var body NativeEnvironmentDetailsPOST
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNativeEnvironmentDetailsPOST overwrites any union data inside the WebServiceDetailsPOST_EnvSpecificDetails as the provided NativeEnvironmentDetailsPOST
func (t *WebServiceDetailsPOST_EnvSpecificDetails) FromNativeEnvironmentDetailsPOST(v NativeEnvironmentDetailsPOST) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNativeEnvironmentDetailsPOST performs a merge with any union data inside the WebServiceDetailsPOST_EnvSpecificDetails, using the provided NativeEnvironmentDetailsPOST
func (t *WebServiceDetailsPOST_EnvSpecificDetails) MergeNativeEnvironmentDetailsPOST(v NativeEnvironmentDetailsPOST) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t WebServiceDetailsPOST_EnvSpecificDetails) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *WebServiceDetailsPOST_EnvSpecificDetails) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetOwners request
	GetOwners(ctx context.Context, params *GetOwnersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOwner request
	GetOwner(ctx context.Context, ownerId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServices request
	GetServices(ctx context.Context, params *GetServicesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateService request with any body
	CreateServiceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateService(ctx context.Context, body CreateServiceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteService request
	DeleteService(ctx context.Context, serviceId ServiceIdParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetService request
	GetService(ctx context.Context, serviceId ServiceIdParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateService request with any body
	UpdateServiceWithBody(ctx context.Context, serviceId ServiceIdParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateService(ctx context.Context, serviceId ServiceIdParam, body UpdateServiceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCustomDomains request
	GetCustomDomains(ctx context.Context, serviceId ServiceIdParam, params *GetCustomDomainsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCustomDomain request with any body
	CreateCustomDomainWithBody(ctx context.Context, serviceId ServiceIdParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCustomDomain(ctx context.Context, serviceId ServiceIdParam, body CreateCustomDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCustomDomain request
	DeleteCustomDomain(ctx context.Context, serviceId ServiceIdParam, customDomainIdOrName CustomDomainIdOrNameParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCustomDomain request
	GetCustomDomain(ctx context.Context, serviceId ServiceIdParam, customDomainIdOrName CustomDomainIdOrNameParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RefreshCustomDomain request
	RefreshCustomDomain(ctx context.Context, serviceId ServiceIdParam, customDomainIdOrName CustomDomainIdOrNameParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDeploys request
	GetDeploys(ctx context.Context, serviceId ServiceIdParam, params *GetDeploysParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDeploy request with any body
	CreateDeployWithBody(ctx context.Context, serviceId ServiceIdParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDeploy(ctx context.Context, serviceId ServiceIdParam, body CreateDeployJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDeploy request
	GetDeploy(ctx context.Context, serviceId ServiceIdParam, deployId DeployIdParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEnvVarsForService request
	GetEnvVarsForService(ctx context.Context, serviceId ServiceIdParam, params *GetEnvVarsForServiceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateEnvVarsForService request with any body
	UpdateEnvVarsForServiceWithBody(ctx context.Context, serviceId ServiceIdParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateEnvVarsForService(ctx context.Context, serviceId ServiceIdParam, body UpdateEnvVarsForServiceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHeaders request
	GetHeaders(ctx context.Context, serviceId ServiceIdParam, params *GetHeadersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListJob request
	ListJob(ctx context.Context, serviceId ServiceIdParam, params *ListJobParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostJob request with any body
	PostJobWithBody(ctx context.Context, serviceId ServiceIdParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostJob(ctx context.Context, serviceId ServiceIdParam, body PostJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJob request
	GetJob(ctx context.Context, serviceId ServiceIdParam, jobId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResumeService request
	ResumeService(ctx context.Context, serviceId ServiceIdParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRoutes request
	GetRoutes(ctx context.Context, serviceId ServiceIdParam, params *GetRoutesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScaleService request with any body
	ScaleServiceWithBody(ctx context.Context, serviceId ServiceIdParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ScaleService(ctx context.Context, serviceId ServiceIdParam, body ScaleServiceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SuspendService request
	SuspendService(ctx context.Context, serviceId ServiceIdParam, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetOwners(ctx context.Context, params *GetOwnersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOwnersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOwner(ctx context.Context, ownerId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOwnerRequest(c.Server, ownerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServices(ctx context.Context, params *GetServicesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServicesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateServiceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateServiceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateService(ctx context.Context, body CreateServiceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateServiceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteService(ctx context.Context, serviceId ServiceIdParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteServiceRequest(c.Server, serviceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetService(ctx context.Context, serviceId ServiceIdParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceRequest(c.Server, serviceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateServiceWithBody(ctx context.Context, serviceId ServiceIdParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateServiceRequestWithBody(c.Server, serviceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateService(ctx context.Context, serviceId ServiceIdParam, body UpdateServiceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateServiceRequest(c.Server, serviceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomDomains(ctx context.Context, serviceId ServiceIdParam, params *GetCustomDomainsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomDomainsRequest(c.Server, serviceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCustomDomainWithBody(ctx context.Context, serviceId ServiceIdParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCustomDomainRequestWithBody(c.Server, serviceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCustomDomain(ctx context.Context, serviceId ServiceIdParam, body CreateCustomDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCustomDomainRequest(c.Server, serviceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCustomDomain(ctx context.Context, serviceId ServiceIdParam, customDomainIdOrName CustomDomainIdOrNameParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCustomDomainRequest(c.Server, serviceId, customDomainIdOrName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomDomain(ctx context.Context, serviceId ServiceIdParam, customDomainIdOrName CustomDomainIdOrNameParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomDomainRequest(c.Server, serviceId, customDomainIdOrName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RefreshCustomDomain(ctx context.Context, serviceId ServiceIdParam, customDomainIdOrName CustomDomainIdOrNameParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRefreshCustomDomainRequest(c.Server, serviceId, customDomainIdOrName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDeploys(ctx context.Context, serviceId ServiceIdParam, params *GetDeploysParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeploysRequest(c.Server, serviceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDeployWithBody(ctx context.Context, serviceId ServiceIdParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDeployRequestWithBody(c.Server, serviceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDeploy(ctx context.Context, serviceId ServiceIdParam, body CreateDeployJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDeployRequest(c.Server, serviceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDeploy(ctx context.Context, serviceId ServiceIdParam, deployId DeployIdParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeployRequest(c.Server, serviceId, deployId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEnvVarsForService(ctx context.Context, serviceId ServiceIdParam, params *GetEnvVarsForServiceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEnvVarsForServiceRequest(c.Server, serviceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEnvVarsForServiceWithBody(ctx context.Context, serviceId ServiceIdParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEnvVarsForServiceRequestWithBody(c.Server, serviceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEnvVarsForService(ctx context.Context, serviceId ServiceIdParam, body UpdateEnvVarsForServiceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEnvVarsForServiceRequest(c.Server, serviceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHeaders(ctx context.Context, serviceId ServiceIdParam, params *GetHeadersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHeadersRequest(c.Server, serviceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListJob(ctx context.Context, serviceId ServiceIdParam, params *ListJobParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListJobRequest(c.Server, serviceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJobWithBody(ctx context.Context, serviceId ServiceIdParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJobRequestWithBody(c.Server, serviceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJob(ctx context.Context, serviceId ServiceIdParam, body PostJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJobRequest(c.Server, serviceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJob(ctx context.Context, serviceId ServiceIdParam, jobId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobRequest(c.Server, serviceId, jobId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResumeService(ctx context.Context, serviceId ServiceIdParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResumeServiceRequest(c.Server, serviceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRoutes(ctx context.Context, serviceId ServiceIdParam, params *GetRoutesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRoutesRequest(c.Server, serviceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScaleServiceWithBody(ctx context.Context, serviceId ServiceIdParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScaleServiceRequestWithBody(c.Server, serviceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScaleService(ctx context.Context, serviceId ServiceIdParam, body ScaleServiceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScaleServiceRequest(c.Server, serviceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SuspendService(ctx context.Context, serviceId ServiceIdParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSuspendServiceRequest(c.Server, serviceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetOwnersRequest generates requests for GetOwners
func NewGetOwnersRequest(server string, params *GetOwnersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/owners")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Email != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, *params.Email); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Cursor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOwnerRequest generates requests for GetOwner
func NewGetOwnerRequest(server string, ownerId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ownerId", runtime.ParamLocationPath, ownerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/owners/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServicesRequest generates requests for GetServices
func NewGetServicesRequest(server string, params *GetServicesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Type != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Env != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "env", runtime.ParamLocationQuery, *params.Env); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Region != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Suspended != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "suspended", runtime.ParamLocationQuery, *params.Suspended); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreatedBefore != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, *params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreatedAfter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, *params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UpdatedBefore != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, *params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UpdatedAfter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, *params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OwnerId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "ownerId", runtime.ParamLocationQuery, *params.OwnerId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Cursor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateServiceRequest calls the generic CreateService builder with application/json body
func NewCreateServiceRequest(server string, body CreateServiceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateServiceRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateServiceRequestWithBody generates requests for CreateService with any type of body
func NewCreateServiceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteServiceRequest generates requests for DeleteService
func NewDeleteServiceRequest(server string, serviceId ServiceIdParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceId", runtime.ParamLocationPath, serviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServiceRequest generates requests for GetService
func NewGetServiceRequest(server string, serviceId ServiceIdParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceId", runtime.ParamLocationPath, serviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateServiceRequest calls the generic UpdateService builder with application/json body
func NewUpdateServiceRequest(server string, serviceId ServiceIdParam, body UpdateServiceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateServiceRequestWithBody(server, serviceId, "application/json", bodyReader)
}

// NewUpdateServiceRequestWithBody generates requests for UpdateService with any type of body
func NewUpdateServiceRequestWithBody(server string, serviceId ServiceIdParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceId", runtime.ParamLocationPath, serviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCustomDomainsRequest generates requests for GetCustomDomains
func NewGetCustomDomainsRequest(server string, serviceId ServiceIdParam, params *GetCustomDomainsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceId", runtime.ParamLocationPath, serviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/%s/custom-domains", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Cursor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DomainType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "domainType", runtime.ParamLocationQuery, *params.DomainType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.VerificationStatus != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verificationStatus", runtime.ParamLocationQuery, *params.VerificationStatus); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreatedBefore != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, *params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreatedAfter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, *params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCustomDomainRequest calls the generic CreateCustomDomain builder with application/json body
func NewCreateCustomDomainRequest(server string, serviceId ServiceIdParam, body CreateCustomDomainJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCustomDomainRequestWithBody(server, serviceId, "application/json", bodyReader)
}

// NewCreateCustomDomainRequestWithBody generates requests for CreateCustomDomain with any type of body
func NewCreateCustomDomainRequestWithBody(server string, serviceId ServiceIdParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceId", runtime.ParamLocationPath, serviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/%s/custom-domains", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCustomDomainRequest generates requests for DeleteCustomDomain
func NewDeleteCustomDomainRequest(server string, serviceId ServiceIdParam, customDomainIdOrName CustomDomainIdOrNameParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceId", runtime.ParamLocationPath, serviceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "customDomainIdOrName", runtime.ParamLocationPath, customDomainIdOrName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/%s/custom-domains/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCustomDomainRequest generates requests for GetCustomDomain
func NewGetCustomDomainRequest(server string, serviceId ServiceIdParam, customDomainIdOrName CustomDomainIdOrNameParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceId", runtime.ParamLocationPath, serviceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "customDomainIdOrName", runtime.ParamLocationPath, customDomainIdOrName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/%s/custom-domains/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRefreshCustomDomainRequest generates requests for RefreshCustomDomain
func NewRefreshCustomDomainRequest(server string, serviceId ServiceIdParam, customDomainIdOrName CustomDomainIdOrNameParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceId", runtime.ParamLocationPath, serviceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "customDomainIdOrName", runtime.ParamLocationPath, customDomainIdOrName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/%s/custom-domains/%s/verify", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDeploysRequest generates requests for GetDeploys
func NewGetDeploysRequest(server string, serviceId ServiceIdParam, params *GetDeploysParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceId", runtime.ParamLocationPath, serviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/%s/deploys", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.StartTime != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, *params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndTime != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, *params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Cursor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateDeployRequest calls the generic CreateDeploy builder with application/json body
func NewCreateDeployRequest(server string, serviceId ServiceIdParam, body CreateDeployJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDeployRequestWithBody(server, serviceId, "application/json", bodyReader)
}

// NewCreateDeployRequestWithBody generates requests for CreateDeploy with any type of body
func NewCreateDeployRequestWithBody(server string, serviceId ServiceIdParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceId", runtime.ParamLocationPath, serviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/%s/deploys", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDeployRequest generates requests for GetDeploy
func NewGetDeployRequest(server string, serviceId ServiceIdParam, deployId DeployIdParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceId", runtime.ParamLocationPath, serviceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "deployId", runtime.ParamLocationPath, deployId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/%s/deploys/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEnvVarsForServiceRequest generates requests for GetEnvVarsForService
func NewGetEnvVarsForServiceRequest(server string, serviceId ServiceIdParam, params *GetEnvVarsForServiceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceId", runtime.ParamLocationPath, serviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/%s/env-vars", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Cursor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateEnvVarsForServiceRequest calls the generic UpdateEnvVarsForService builder with application/json body
func NewUpdateEnvVarsForServiceRequest(server string, serviceId ServiceIdParam, body UpdateEnvVarsForServiceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateEnvVarsForServiceRequestWithBody(server, serviceId, "application/json", bodyReader)
}

// NewUpdateEnvVarsForServiceRequestWithBody generates requests for UpdateEnvVarsForService with any type of body
func NewUpdateEnvVarsForServiceRequestWithBody(server string, serviceId ServiceIdParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceId", runtime.ParamLocationPath, serviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/%s/env-vars", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetHeadersRequest generates requests for GetHeaders
func NewGetHeadersRequest(server string, serviceId ServiceIdParam, params *GetHeadersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceId", runtime.ParamLocationPath, serviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/%s/headers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Path != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "path", runtime.ParamLocationQuery, *params.Path); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Value != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "value", runtime.ParamLocationQuery, *params.Value); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Cursor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListJobRequest generates requests for ListJob
func NewListJobRequest(server string, serviceId ServiceIdParam, params *ListJobParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceId", runtime.ParamLocationPath, serviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/%s/jobs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Cursor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreatedBefore != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, *params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreatedAfter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, *params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartedBefore != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startedBefore", runtime.ParamLocationQuery, *params.StartedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartedAfter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startedAfter", runtime.ParamLocationQuery, *params.StartedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FinishedBefore != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "finishedBefore", runtime.ParamLocationQuery, *params.FinishedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FinishedAfter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "finishedAfter", runtime.ParamLocationQuery, *params.FinishedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostJobRequest calls the generic PostJob builder with application/json body
func NewPostJobRequest(server string, serviceId ServiceIdParam, body PostJobJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostJobRequestWithBody(server, serviceId, "application/json", bodyReader)
}

// NewPostJobRequestWithBody generates requests for PostJob with any type of body
func NewPostJobRequestWithBody(server string, serviceId ServiceIdParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceId", runtime.ParamLocationPath, serviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/%s/jobs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetJobRequest generates requests for GetJob
func NewGetJobRequest(server string, serviceId ServiceIdParam, jobId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceId", runtime.ParamLocationPath, serviceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/%s/jobs/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewResumeServiceRequest generates requests for ResumeService
func NewResumeServiceRequest(server string, serviceId ServiceIdParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceId", runtime.ParamLocationPath, serviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/%s/resume", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRoutesRequest generates requests for GetRoutes
func NewGetRoutesRequest(server string, serviceId ServiceIdParam, params *GetRoutesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceId", runtime.ParamLocationPath, serviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/%s/routes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Type != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Source != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "source", runtime.ParamLocationQuery, *params.Source); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Destination != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "destination", runtime.ParamLocationQuery, *params.Destination); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Cursor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScaleServiceRequest calls the generic ScaleService builder with application/json body
func NewScaleServiceRequest(server string, serviceId ServiceIdParam, body ScaleServiceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewScaleServiceRequestWithBody(server, serviceId, "application/json", bodyReader)
}

// NewScaleServiceRequestWithBody generates requests for ScaleService with any type of body
func NewScaleServiceRequestWithBody(server string, serviceId ServiceIdParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceId", runtime.ParamLocationPath, serviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/%s/scale", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSuspendServiceRequest generates requests for SuspendService
func NewSuspendServiceRequest(server string, serviceId ServiceIdParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceId", runtime.ParamLocationPath, serviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/%s/suspend", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetOwners request
	GetOwnersWithResponse(ctx context.Context, params *GetOwnersParams, reqEditors ...RequestEditorFn) (*GetOwnersResponse, error)

	// GetOwner request
	GetOwnerWithResponse(ctx context.Context, ownerId string, reqEditors ...RequestEditorFn) (*GetOwnerResponse, error)

	// GetServices request
	GetServicesWithResponse(ctx context.Context, params *GetServicesParams, reqEditors ...RequestEditorFn) (*GetServicesResponse, error)

	// CreateService request with any body
	CreateServiceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateServiceResponse, error)

	CreateServiceWithResponse(ctx context.Context, body CreateServiceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateServiceResponse, error)

	// DeleteService request
	DeleteServiceWithResponse(ctx context.Context, serviceId ServiceIdParam, reqEditors ...RequestEditorFn) (*DeleteServiceResponse, error)

	// GetService request
	GetServiceWithResponse(ctx context.Context, serviceId ServiceIdParam, reqEditors ...RequestEditorFn) (*GetServiceResponse, error)

	// UpdateService request with any body
	UpdateServiceWithBodyWithResponse(ctx context.Context, serviceId ServiceIdParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateServiceResponse, error)

	UpdateServiceWithResponse(ctx context.Context, serviceId ServiceIdParam, body UpdateServiceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateServiceResponse, error)

	// GetCustomDomains request
	GetCustomDomainsWithResponse(ctx context.Context, serviceId ServiceIdParam, params *GetCustomDomainsParams, reqEditors ...RequestEditorFn) (*GetCustomDomainsResponse, error)

	// CreateCustomDomain request with any body
	CreateCustomDomainWithBodyWithResponse(ctx context.Context, serviceId ServiceIdParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCustomDomainResponse, error)

	CreateCustomDomainWithResponse(ctx context.Context, serviceId ServiceIdParam, body CreateCustomDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCustomDomainResponse, error)

	// DeleteCustomDomain request
	DeleteCustomDomainWithResponse(ctx context.Context, serviceId ServiceIdParam, customDomainIdOrName CustomDomainIdOrNameParam, reqEditors ...RequestEditorFn) (*DeleteCustomDomainResponse, error)

	// GetCustomDomain request
	GetCustomDomainWithResponse(ctx context.Context, serviceId ServiceIdParam, customDomainIdOrName CustomDomainIdOrNameParam, reqEditors ...RequestEditorFn) (*GetCustomDomainResponse, error)

	// RefreshCustomDomain request
	RefreshCustomDomainWithResponse(ctx context.Context, serviceId ServiceIdParam, customDomainIdOrName CustomDomainIdOrNameParam, reqEditors ...RequestEditorFn) (*RefreshCustomDomainResponse, error)

	// GetDeploys request
	GetDeploysWithResponse(ctx context.Context, serviceId ServiceIdParam, params *GetDeploysParams, reqEditors ...RequestEditorFn) (*GetDeploysResponse, error)

	// CreateDeploy request with any body
	CreateDeployWithBodyWithResponse(ctx context.Context, serviceId ServiceIdParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDeployResponse, error)

	CreateDeployWithResponse(ctx context.Context, serviceId ServiceIdParam, body CreateDeployJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDeployResponse, error)

	// GetDeploy request
	GetDeployWithResponse(ctx context.Context, serviceId ServiceIdParam, deployId DeployIdParam, reqEditors ...RequestEditorFn) (*GetDeployResponse, error)

	// GetEnvVarsForService request
	GetEnvVarsForServiceWithResponse(ctx context.Context, serviceId ServiceIdParam, params *GetEnvVarsForServiceParams, reqEditors ...RequestEditorFn) (*GetEnvVarsForServiceResponse, error)

	// UpdateEnvVarsForService request with any body
	UpdateEnvVarsForServiceWithBodyWithResponse(ctx context.Context, serviceId ServiceIdParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEnvVarsForServiceResponse, error)

	UpdateEnvVarsForServiceWithResponse(ctx context.Context, serviceId ServiceIdParam, body UpdateEnvVarsForServiceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateEnvVarsForServiceResponse, error)

	// GetHeaders request
	GetHeadersWithResponse(ctx context.Context, serviceId ServiceIdParam, params *GetHeadersParams, reqEditors ...RequestEditorFn) (*GetHeadersResponse, error)

	// ListJob request
	ListJobWithResponse(ctx context.Context, serviceId ServiceIdParam, params *ListJobParams, reqEditors ...RequestEditorFn) (*ListJobResponse, error)

	// PostJob request with any body
	PostJobWithBodyWithResponse(ctx context.Context, serviceId ServiceIdParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJobResponse, error)

	PostJobWithResponse(ctx context.Context, serviceId ServiceIdParam, body PostJobJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJobResponse, error)

	// GetJob request
	GetJobWithResponse(ctx context.Context, serviceId ServiceIdParam, jobId string, reqEditors ...RequestEditorFn) (*GetJobResponse, error)

	// ResumeService request
	ResumeServiceWithResponse(ctx context.Context, serviceId ServiceIdParam, reqEditors ...RequestEditorFn) (*ResumeServiceResponse, error)

	// GetRoutes request
	GetRoutesWithResponse(ctx context.Context, serviceId ServiceIdParam, params *GetRoutesParams, reqEditors ...RequestEditorFn) (*GetRoutesResponse, error)

	// ScaleService request with any body
	ScaleServiceWithBodyWithResponse(ctx context.Context, serviceId ServiceIdParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScaleServiceResponse, error)

	ScaleServiceWithResponse(ctx context.Context, serviceId ServiceIdParam, body ScaleServiceJSONRequestBody, reqEditors ...RequestEditorFn) (*ScaleServiceResponse, error)

	// SuspendService request
	SuspendServiceWithResponse(ctx context.Context, serviceId ServiceIdParam, reqEditors ...RequestEditorFn) (*SuspendServiceResponse, error)
}

type GetOwnersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Cursor *[]byte `json:"cursor,omitempty"`
		Owner  *Owner  `json:"owner,omitempty"`
	}
	JSON401 *Error
	JSON406 *Error
	JSON429 *Error
	JSON500 *Error
	JSON503 *Error
}

// Status returns HTTPResponse.Status
func (r GetOwnersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOwnersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOwnerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Owner
	JSON401      *Error
	JSON404      *Error
	JSON406      *Error
	JSON410      *Error
	JSON429      *Error
	JSON500      *Error
	JSON503      *Error
}

// Status returns HTTPResponse.Status
func (r GetOwnerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOwnerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Cursor  *[]byte  `json:"cursor,omitempty"`
		Service *Service `json:"service,omitempty"`
	}
	JSON401 *Error
	JSON406 *Error
	JSON429 *Error
	JSON500 *Error
	JSON503 *Error
}

// Status returns HTTPResponse.Status
func (r GetServicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		DeployId *string  `json:"deployId,omitempty"`
		Service  *Service `json:"service,omitempty"`
	}
	JSON400 *Error
	JSON401 *Error
	JSON402 *Error
	JSON406 *Error
	JSON409 *Error
	JSON429 *Error
	JSON500 *Error
	JSON503 *Error
}

// Status returns HTTPResponse.Status
func (r CreateServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON406      *Error
	JSON410      *Error
	JSON429      *Error
	JSON500      *Error
	JSON503      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Service
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON406      *Error
	JSON410      *Error
	JSON429      *Error
	JSON500      *Error
	JSON503      *Error
}

// Status returns HTTPResponse.Status
func (r GetServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Service
	JSON400      *Error
	JSON401      *Error
	JSON402      *Error
	JSON403      *Error
	JSON404      *Error
	JSON406      *Error
	JSON409      *Error
	JSON410      *Error
	JSON429      *Error
	JSON500      *Error
	JSON503      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomDomainsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Cursor       *[]byte       `json:"cursor,omitempty"`
		CustomDomain *CustomDomain `json:"customDomain,omitempty"`
	}
	JSON400 *Error
	JSON401 *Error
	JSON403 *Error
	JSON404 *Error
	JSON406 *Error
	JSON410 *Error
	JSON429 *Error
	JSON500 *Error
	JSON503 *Error
}

// Status returns HTTPResponse.Status
func (r GetCustomDomainsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomDomainsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCustomDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]CustomDomain
	JSON400      *Error
	JSON401      *Error
	JSON402      *Error
	JSON403      *Error
	JSON404      *Error
	JSON406      *Error
	JSON409      *Error
	JSON410      *Error
	JSON429      *Error
	JSON500      *Error
	JSON503      *Error
}

// Status returns HTTPResponse.Status
func (r CreateCustomDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCustomDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCustomDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON406      *Error
	JSON410      *Error
	JSON429      *Error
	JSON500      *Error
	JSON503      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteCustomDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCustomDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomDomain
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON406      *Error
	JSON410      *Error
	JSON429      *Error
	JSON500      *Error
	JSON503      *Error
}

// Status returns HTTPResponse.Status
func (r GetCustomDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RefreshCustomDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON406      *Error
	JSON410      *Error
	JSON429      *Error
	JSON500      *Error
	JSON503      *Error
}

// Status returns HTTPResponse.Status
func (r RefreshCustomDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RefreshCustomDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDeploysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Cursor *[]byte `json:"cursor,omitempty"`
		Deploy *Deploy `json:"deploy,omitempty"`
	}
	JSON401 *Error
	JSON403 *Error
	JSON404 *Error
	JSON406 *Error
	JSON410 *Error
	JSON429 *Error
	JSON500 *Error
	JSON503 *Error
}

// Status returns HTTPResponse.Status
func (r GetDeploysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDeploysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDeployResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Deploy
	JSON400      *Error
	JSON401      *Error
	JSON404      *Error
	JSON406      *Error
	JSON409      *Error
	JSON410      *Error
	JSON429      *Error
	JSON500      *Error
	JSON503      *Error
}

// Status returns HTTPResponse.Status
func (r CreateDeployResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDeployResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDeployResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Deploy
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON406      *Error
	JSON410      *Error
	JSON429      *Error
	JSON500      *Error
	JSON503      *Error
}

// Status returns HTTPResponse.Status
func (r GetDeployResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDeployResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEnvVarsForServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Cursor *[]byte `json:"cursor,omitempty"`
		EnvVar *EnvVar `json:"envVar,omitempty"`
	}
	JSON401 *Error
	JSON403 *Error
	JSON404 *Error
	JSON406 *Error
	JSON410 *Error
	JSON429 *Error
	JSON500 *Error
	JSON503 *Error
}

// Status returns HTTPResponse.Status
func (r GetEnvVarsForServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEnvVarsForServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateEnvVarsForServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Cursor *[]byte `json:"cursor,omitempty"`
		EnvVar *EnvVar `json:"envVar,omitempty"`
	}
	JSON400 *Error
	JSON401 *Error
	JSON403 *Error
	JSON404 *Error
	JSON406 *Error
	JSON410 *Error
	JSON429 *Error
	JSON500 *Error
	JSON503 *Error
}

// Status returns HTTPResponse.Status
func (r UpdateEnvVarsForServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateEnvVarsForServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHeadersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Cursor  *[]byte `json:"cursor,omitempty"`
		Headers *Header `json:"headers,omitempty"`
	}
	JSON401 *Error
	JSON403 *Error
	JSON404 *Error
	JSON406 *Error
	JSON410 *Error
	JSON429 *Error
	JSON500 *Error
	JSON503 *Error
}

// Status returns HTTPResponse.Status
func (r GetHeadersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHeadersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Cursor *[]byte `json:"cursor,omitempty"`
		Job    *Job    `json:"job,omitempty"`
	}
	JSON400 *Error
	JSON401 *Error
	JSON404 *Error
	JSON429 *Error
	JSON500 *Error
	JSON503 *Error
}

// Status returns HTTPResponse.Status
func (r ListJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Job
	JSON400      *Error
	JSON401      *Error
	JSON404      *Error
	JSON429      *Error
	JSON500      *Error
	JSON503      *Error
}

// Status returns HTTPResponse.Status
func (r PostJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Job
	JSON400      *Error
	JSON401      *Error
	JSON404      *Error
	JSON429      *Error
	JSON500      *Error
	JSON503      *Error
}

// Status returns HTTPResponse.Status
func (r GetJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResumeServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON406      *Error
	JSON410      *Error
	JSON429      *Error
	JSON500      *Error
	JSON503      *Error
}

// Status returns HTTPResponse.Status
func (r ResumeServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResumeServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRoutesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Cursor *[]byte `json:"cursor,omitempty"`
		Routes *Route  `json:"routes,omitempty"`
	}
	JSON401 *Error
	JSON403 *Error
	JSON404 *Error
	JSON406 *Error
	JSON410 *Error
	JSON429 *Error
	JSON500 *Error
	JSON503 *Error
}

// Status returns HTTPResponse.Status
func (r GetRoutesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRoutesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScaleServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Deploy
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON406      *Error
	JSON410      *Error
	JSON429      *Error
	JSON500      *Error
	JSON503      *Error
}

// Status returns HTTPResponse.Status
func (r ScaleServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScaleServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SuspendServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON406      *Error
	JSON410      *Error
	JSON429      *Error
	JSON500      *Error
	JSON503      *Error
}

// Status returns HTTPResponse.Status
func (r SuspendServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SuspendServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetOwnersWithResponse request returning *GetOwnersResponse
func (c *ClientWithResponses) GetOwnersWithResponse(ctx context.Context, params *GetOwnersParams, reqEditors ...RequestEditorFn) (*GetOwnersResponse, error) {
	rsp, err := c.GetOwners(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOwnersResponse(rsp)
}

// GetOwnerWithResponse request returning *GetOwnerResponse
func (c *ClientWithResponses) GetOwnerWithResponse(ctx context.Context, ownerId string, reqEditors ...RequestEditorFn) (*GetOwnerResponse, error) {
	rsp, err := c.GetOwner(ctx, ownerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOwnerResponse(rsp)
}

// GetServicesWithResponse request returning *GetServicesResponse
func (c *ClientWithResponses) GetServicesWithResponse(ctx context.Context, params *GetServicesParams, reqEditors ...RequestEditorFn) (*GetServicesResponse, error) {
	rsp, err := c.GetServices(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServicesResponse(rsp)
}

// CreateServiceWithBodyWithResponse request with arbitrary body returning *CreateServiceResponse
func (c *ClientWithResponses) CreateServiceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateServiceResponse, error) {
	rsp, err := c.CreateServiceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateServiceResponse(rsp)
}

func (c *ClientWithResponses) CreateServiceWithResponse(ctx context.Context, body CreateServiceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateServiceResponse, error) {
	rsp, err := c.CreateService(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateServiceResponse(rsp)
}

// DeleteServiceWithResponse request returning *DeleteServiceResponse
func (c *ClientWithResponses) DeleteServiceWithResponse(ctx context.Context, serviceId ServiceIdParam, reqEditors ...RequestEditorFn) (*DeleteServiceResponse, error) {
	rsp, err := c.DeleteService(ctx, serviceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteServiceResponse(rsp)
}

// GetServiceWithResponse request returning *GetServiceResponse
func (c *ClientWithResponses) GetServiceWithResponse(ctx context.Context, serviceId ServiceIdParam, reqEditors ...RequestEditorFn) (*GetServiceResponse, error) {
	rsp, err := c.GetService(ctx, serviceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceResponse(rsp)
}

// UpdateServiceWithBodyWithResponse request with arbitrary body returning *UpdateServiceResponse
func (c *ClientWithResponses) UpdateServiceWithBodyWithResponse(ctx context.Context, serviceId ServiceIdParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateServiceResponse, error) {
	rsp, err := c.UpdateServiceWithBody(ctx, serviceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateServiceResponse(rsp)
}

func (c *ClientWithResponses) UpdateServiceWithResponse(ctx context.Context, serviceId ServiceIdParam, body UpdateServiceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateServiceResponse, error) {
	rsp, err := c.UpdateService(ctx, serviceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateServiceResponse(rsp)
}

// GetCustomDomainsWithResponse request returning *GetCustomDomainsResponse
func (c *ClientWithResponses) GetCustomDomainsWithResponse(ctx context.Context, serviceId ServiceIdParam, params *GetCustomDomainsParams, reqEditors ...RequestEditorFn) (*GetCustomDomainsResponse, error) {
	rsp, err := c.GetCustomDomains(ctx, serviceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomDomainsResponse(rsp)
}

// CreateCustomDomainWithBodyWithResponse request with arbitrary body returning *CreateCustomDomainResponse
func (c *ClientWithResponses) CreateCustomDomainWithBodyWithResponse(ctx context.Context, serviceId ServiceIdParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCustomDomainResponse, error) {
	rsp, err := c.CreateCustomDomainWithBody(ctx, serviceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCustomDomainResponse(rsp)
}

func (c *ClientWithResponses) CreateCustomDomainWithResponse(ctx context.Context, serviceId ServiceIdParam, body CreateCustomDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCustomDomainResponse, error) {
	rsp, err := c.CreateCustomDomain(ctx, serviceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCustomDomainResponse(rsp)
}

// DeleteCustomDomainWithResponse request returning *DeleteCustomDomainResponse
func (c *ClientWithResponses) DeleteCustomDomainWithResponse(ctx context.Context, serviceId ServiceIdParam, customDomainIdOrName CustomDomainIdOrNameParam, reqEditors ...RequestEditorFn) (*DeleteCustomDomainResponse, error) {
	rsp, err := c.DeleteCustomDomain(ctx, serviceId, customDomainIdOrName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCustomDomainResponse(rsp)
}

// GetCustomDomainWithResponse request returning *GetCustomDomainResponse
func (c *ClientWithResponses) GetCustomDomainWithResponse(ctx context.Context, serviceId ServiceIdParam, customDomainIdOrName CustomDomainIdOrNameParam, reqEditors ...RequestEditorFn) (*GetCustomDomainResponse, error) {
	rsp, err := c.GetCustomDomain(ctx, serviceId, customDomainIdOrName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomDomainResponse(rsp)
}

// RefreshCustomDomainWithResponse request returning *RefreshCustomDomainResponse
func (c *ClientWithResponses) RefreshCustomDomainWithResponse(ctx context.Context, serviceId ServiceIdParam, customDomainIdOrName CustomDomainIdOrNameParam, reqEditors ...RequestEditorFn) (*RefreshCustomDomainResponse, error) {
	rsp, err := c.RefreshCustomDomain(ctx, serviceId, customDomainIdOrName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRefreshCustomDomainResponse(rsp)
}

// GetDeploysWithResponse request returning *GetDeploysResponse
func (c *ClientWithResponses) GetDeploysWithResponse(ctx context.Context, serviceId ServiceIdParam, params *GetDeploysParams, reqEditors ...RequestEditorFn) (*GetDeploysResponse, error) {
	rsp, err := c.GetDeploys(ctx, serviceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeploysResponse(rsp)
}

// CreateDeployWithBodyWithResponse request with arbitrary body returning *CreateDeployResponse
func (c *ClientWithResponses) CreateDeployWithBodyWithResponse(ctx context.Context, serviceId ServiceIdParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDeployResponse, error) {
	rsp, err := c.CreateDeployWithBody(ctx, serviceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDeployResponse(rsp)
}

func (c *ClientWithResponses) CreateDeployWithResponse(ctx context.Context, serviceId ServiceIdParam, body CreateDeployJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDeployResponse, error) {
	rsp, err := c.CreateDeploy(ctx, serviceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDeployResponse(rsp)
}

// GetDeployWithResponse request returning *GetDeployResponse
func (c *ClientWithResponses) GetDeployWithResponse(ctx context.Context, serviceId ServiceIdParam, deployId DeployIdParam, reqEditors ...RequestEditorFn) (*GetDeployResponse, error) {
	rsp, err := c.GetDeploy(ctx, serviceId, deployId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeployResponse(rsp)
}

// GetEnvVarsForServiceWithResponse request returning *GetEnvVarsForServiceResponse
func (c *ClientWithResponses) GetEnvVarsForServiceWithResponse(ctx context.Context, serviceId ServiceIdParam, params *GetEnvVarsForServiceParams, reqEditors ...RequestEditorFn) (*GetEnvVarsForServiceResponse, error) {
	rsp, err := c.GetEnvVarsForService(ctx, serviceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEnvVarsForServiceResponse(rsp)
}

// UpdateEnvVarsForServiceWithBodyWithResponse request with arbitrary body returning *UpdateEnvVarsForServiceResponse
func (c *ClientWithResponses) UpdateEnvVarsForServiceWithBodyWithResponse(ctx context.Context, serviceId ServiceIdParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEnvVarsForServiceResponse, error) {
	rsp, err := c.UpdateEnvVarsForServiceWithBody(ctx, serviceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEnvVarsForServiceResponse(rsp)
}

func (c *ClientWithResponses) UpdateEnvVarsForServiceWithResponse(ctx context.Context, serviceId ServiceIdParam, body UpdateEnvVarsForServiceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateEnvVarsForServiceResponse, error) {
	rsp, err := c.UpdateEnvVarsForService(ctx, serviceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEnvVarsForServiceResponse(rsp)
}

// GetHeadersWithResponse request returning *GetHeadersResponse
func (c *ClientWithResponses) GetHeadersWithResponse(ctx context.Context, serviceId ServiceIdParam, params *GetHeadersParams, reqEditors ...RequestEditorFn) (*GetHeadersResponse, error) {
	rsp, err := c.GetHeaders(ctx, serviceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHeadersResponse(rsp)
}

// ListJobWithResponse request returning *ListJobResponse
func (c *ClientWithResponses) ListJobWithResponse(ctx context.Context, serviceId ServiceIdParam, params *ListJobParams, reqEditors ...RequestEditorFn) (*ListJobResponse, error) {
	rsp, err := c.ListJob(ctx, serviceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListJobResponse(rsp)
}

// PostJobWithBodyWithResponse request with arbitrary body returning *PostJobResponse
func (c *ClientWithResponses) PostJobWithBodyWithResponse(ctx context.Context, serviceId ServiceIdParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJobResponse, error) {
	rsp, err := c.PostJobWithBody(ctx, serviceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJobResponse(rsp)
}

func (c *ClientWithResponses) PostJobWithResponse(ctx context.Context, serviceId ServiceIdParam, body PostJobJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJobResponse, error) {
	rsp, err := c.PostJob(ctx, serviceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJobResponse(rsp)
}

// GetJobWithResponse request returning *GetJobResponse
func (c *ClientWithResponses) GetJobWithResponse(ctx context.Context, serviceId ServiceIdParam, jobId string, reqEditors ...RequestEditorFn) (*GetJobResponse, error) {
	rsp, err := c.GetJob(ctx, serviceId, jobId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobResponse(rsp)
}

// ResumeServiceWithResponse request returning *ResumeServiceResponse
func (c *ClientWithResponses) ResumeServiceWithResponse(ctx context.Context, serviceId ServiceIdParam, reqEditors ...RequestEditorFn) (*ResumeServiceResponse, error) {
	rsp, err := c.ResumeService(ctx, serviceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResumeServiceResponse(rsp)
}

// GetRoutesWithResponse request returning *GetRoutesResponse
func (c *ClientWithResponses) GetRoutesWithResponse(ctx context.Context, serviceId ServiceIdParam, params *GetRoutesParams, reqEditors ...RequestEditorFn) (*GetRoutesResponse, error) {
	rsp, err := c.GetRoutes(ctx, serviceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRoutesResponse(rsp)
}

// ScaleServiceWithBodyWithResponse request with arbitrary body returning *ScaleServiceResponse
func (c *ClientWithResponses) ScaleServiceWithBodyWithResponse(ctx context.Context, serviceId ServiceIdParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScaleServiceResponse, error) {
	rsp, err := c.ScaleServiceWithBody(ctx, serviceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScaleServiceResponse(rsp)
}

func (c *ClientWithResponses) ScaleServiceWithResponse(ctx context.Context, serviceId ServiceIdParam, body ScaleServiceJSONRequestBody, reqEditors ...RequestEditorFn) (*ScaleServiceResponse, error) {
	rsp, err := c.ScaleService(ctx, serviceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScaleServiceResponse(rsp)
}

// SuspendServiceWithResponse request returning *SuspendServiceResponse
func (c *ClientWithResponses) SuspendServiceWithResponse(ctx context.Context, serviceId ServiceIdParam, reqEditors ...RequestEditorFn) (*SuspendServiceResponse, error) {
	rsp, err := c.SuspendService(ctx, serviceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSuspendServiceResponse(rsp)
}

// ParseGetOwnersResponse parses an HTTP response from a GetOwnersWithResponse call
func ParseGetOwnersResponse(rsp *http.Response) (*GetOwnersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOwnersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Cursor *[]byte `json:"cursor,omitempty"`
			Owner  *Owner  `json:"owner,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetOwnerResponse parses an HTTP response from a GetOwnerWithResponse call
func ParseGetOwnerResponse(rsp *http.Response) (*GetOwnerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOwnerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Owner
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 410:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON410 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetServicesResponse parses an HTTP response from a GetServicesWithResponse call
func ParseGetServicesResponse(rsp *http.Response) (*GetServicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Cursor  *[]byte  `json:"cursor,omitempty"`
			Service *Service `json:"service,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseCreateServiceResponse parses an HTTP response from a CreateServiceWithResponse call
func ParseCreateServiceResponse(rsp *http.Response) (*CreateServiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			DeployId *string  `json:"deployId,omitempty"`
			Service  *Service `json:"service,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 402:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON402 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseDeleteServiceResponse parses an HTTP response from a DeleteServiceWithResponse call
func ParseDeleteServiceResponse(rsp *http.Response) (*DeleteServiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 410:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON410 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetServiceResponse parses an HTTP response from a GetServiceWithResponse call
func ParseGetServiceResponse(rsp *http.Response) (*GetServiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Service
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 410:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON410 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseUpdateServiceResponse parses an HTTP response from a UpdateServiceWithResponse call
func ParseUpdateServiceResponse(rsp *http.Response) (*UpdateServiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Service
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 402:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON402 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 410:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON410 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetCustomDomainsResponse parses an HTTP response from a GetCustomDomainsWithResponse call
func ParseGetCustomDomainsResponse(rsp *http.Response) (*GetCustomDomainsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCustomDomainsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Cursor       *[]byte       `json:"cursor,omitempty"`
			CustomDomain *CustomDomain `json:"customDomain,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 410:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON410 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseCreateCustomDomainResponse parses an HTTP response from a CreateCustomDomainWithResponse call
func ParseCreateCustomDomainResponse(rsp *http.Response) (*CreateCustomDomainResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCustomDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []CustomDomain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 402:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON402 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 410:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON410 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseDeleteCustomDomainResponse parses an HTTP response from a DeleteCustomDomainWithResponse call
func ParseDeleteCustomDomainResponse(rsp *http.Response) (*DeleteCustomDomainResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCustomDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 410:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON410 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetCustomDomainResponse parses an HTTP response from a GetCustomDomainWithResponse call
func ParseGetCustomDomainResponse(rsp *http.Response) (*GetCustomDomainResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCustomDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomDomain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 410:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON410 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseRefreshCustomDomainResponse parses an HTTP response from a RefreshCustomDomainWithResponse call
func ParseRefreshCustomDomainResponse(rsp *http.Response) (*RefreshCustomDomainResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RefreshCustomDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 410:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON410 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetDeploysResponse parses an HTTP response from a GetDeploysWithResponse call
func ParseGetDeploysResponse(rsp *http.Response) (*GetDeploysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDeploysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Cursor *[]byte `json:"cursor,omitempty"`
			Deploy *Deploy `json:"deploy,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 410:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON410 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseCreateDeployResponse parses an HTTP response from a CreateDeployWithResponse call
func ParseCreateDeployResponse(rsp *http.Response) (*CreateDeployResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDeployResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Deploy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 410:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON410 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetDeployResponse parses an HTTP response from a GetDeployWithResponse call
func ParseGetDeployResponse(rsp *http.Response) (*GetDeployResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDeployResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Deploy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 410:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON410 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetEnvVarsForServiceResponse parses an HTTP response from a GetEnvVarsForServiceWithResponse call
func ParseGetEnvVarsForServiceResponse(rsp *http.Response) (*GetEnvVarsForServiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEnvVarsForServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Cursor *[]byte `json:"cursor,omitempty"`
			EnvVar *EnvVar `json:"envVar,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 410:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON410 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseUpdateEnvVarsForServiceResponse parses an HTTP response from a UpdateEnvVarsForServiceWithResponse call
func ParseUpdateEnvVarsForServiceResponse(rsp *http.Response) (*UpdateEnvVarsForServiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateEnvVarsForServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Cursor *[]byte `json:"cursor,omitempty"`
			EnvVar *EnvVar `json:"envVar,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 410:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON410 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetHeadersResponse parses an HTTP response from a GetHeadersWithResponse call
func ParseGetHeadersResponse(rsp *http.Response) (*GetHeadersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHeadersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Cursor  *[]byte `json:"cursor,omitempty"`
			Headers *Header `json:"headers,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 410:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON410 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseListJobResponse parses an HTTP response from a ListJobWithResponse call
func ParseListJobResponse(rsp *http.Response) (*ListJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Cursor *[]byte `json:"cursor,omitempty"`
			Job    *Job    `json:"job,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePostJobResponse parses an HTTP response from a PostJobWithResponse call
func ParsePostJobResponse(rsp *http.Response) (*PostJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Job
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetJobResponse parses an HTTP response from a GetJobWithResponse call
func ParseGetJobResponse(rsp *http.Response) (*GetJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Job
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseResumeServiceResponse parses an HTTP response from a ResumeServiceWithResponse call
func ParseResumeServiceResponse(rsp *http.Response) (*ResumeServiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResumeServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 410:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON410 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetRoutesResponse parses an HTTP response from a GetRoutesWithResponse call
func ParseGetRoutesResponse(rsp *http.Response) (*GetRoutesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRoutesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Cursor *[]byte `json:"cursor,omitempty"`
			Routes *Route  `json:"routes,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 410:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON410 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseScaleServiceResponse parses an HTTP response from a ScaleServiceWithResponse call
func ParseScaleServiceResponse(rsp *http.Response) (*ScaleServiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScaleServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Deploy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 410:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON410 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseSuspendServiceResponse parses an HTTP response from a SuspendServiceWithResponse call
func ParseSuspendServiceResponse(rsp *http.Response) (*SuspendServiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SuspendServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 410:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON410 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List authorized users and teams
	// (GET /owners)
	GetOwners(ctx echo.Context, params GetOwnersParams) error
	// Retrieve user or team
	// (GET /owners/{ownerId})
	GetOwner(ctx echo.Context, ownerId string) error
	// List services
	// (GET /services)
	GetServices(ctx echo.Context, params GetServicesParams) error
	// Create service
	// (POST /services)
	CreateService(ctx echo.Context) error
	// Delete service
	// (DELETE /services/{serviceId})
	DeleteService(ctx echo.Context, serviceId ServiceIdParam) error
	// Retrieve service
	// (GET /services/{serviceId})
	GetService(ctx echo.Context, serviceId ServiceIdParam) error
	// Update service
	// (PATCH /services/{serviceId})
	UpdateService(ctx echo.Context, serviceId ServiceIdParam) error
	// List custom domains
	// (GET /services/{serviceId}/custom-domains)
	GetCustomDomains(ctx echo.Context, serviceId ServiceIdParam, params GetCustomDomainsParams) error
	// Add custom domain
	// (POST /services/{serviceId}/custom-domains)
	CreateCustomDomain(ctx echo.Context, serviceId ServiceIdParam) error
	// Delete custom domain
	// (DELETE /services/{serviceId}/custom-domains/{customDomainIdOrName})
	DeleteCustomDomain(ctx echo.Context, serviceId ServiceIdParam, customDomainIdOrName CustomDomainIdOrNameParam) error
	// Retrieve custom domain
	// (GET /services/{serviceId}/custom-domains/{customDomainIdOrName})
	GetCustomDomain(ctx echo.Context, serviceId ServiceIdParam, customDomainIdOrName CustomDomainIdOrNameParam) error
	// Verify DNS configuration
	// (POST /services/{serviceId}/custom-domains/{customDomainIdOrName}/verify)
	RefreshCustomDomain(ctx echo.Context, serviceId ServiceIdParam, customDomainIdOrName CustomDomainIdOrNameParam) error
	// List deploys
	// (GET /services/{serviceId}/deploys)
	GetDeploys(ctx echo.Context, serviceId ServiceIdParam, params GetDeploysParams) error
	// Trigger a deploy
	// (POST /services/{serviceId}/deploys)
	CreateDeploy(ctx echo.Context, serviceId ServiceIdParam) error
	// Retrieve deploy
	// (GET /services/{serviceId}/deploys/{deployId})
	GetDeploy(ctx echo.Context, serviceId ServiceIdParam, deployId DeployIdParam) error
	// Retrieve environment variables
	// (GET /services/{serviceId}/env-vars)
	GetEnvVarsForService(ctx echo.Context, serviceId ServiceIdParam, params GetEnvVarsForServiceParams) error
	// Update environment variables
	// (PUT /services/{serviceId}/env-vars)
	UpdateEnvVarsForService(ctx echo.Context, serviceId ServiceIdParam) error
	// Retrieve headers
	// (GET /services/{serviceId}/headers)
	GetHeaders(ctx echo.Context, serviceId ServiceIdParam, params GetHeadersParams) error
	// List jobs
	// (GET /services/{serviceId}/jobs)
	ListJob(ctx echo.Context, serviceId ServiceIdParam, params ListJobParams) error
	// Create job
	// (POST /services/{serviceId}/jobs)
	PostJob(ctx echo.Context, serviceId ServiceIdParam) error
	// Retrieve job
	// (GET /services/{serviceId}/jobs/{jobId})
	GetJob(ctx echo.Context, serviceId ServiceIdParam, jobId string) error
	// Resume service
	// (POST /services/{serviceId}/resume)
	ResumeService(ctx echo.Context, serviceId ServiceIdParam) error
	// Retrieve redirect and rewrite rules
	// (GET /services/{serviceId}/routes)
	GetRoutes(ctx echo.Context, serviceId ServiceIdParam, params GetRoutesParams) error
	// Scale service to desired number of instances
	// (POST /services/{serviceId}/scale)
	ScaleService(ctx echo.Context, serviceId ServiceIdParam) error
	// Suspend service
	// (POST /services/{serviceId}/suspend)
	SuspendService(ctx echo.Context, serviceId ServiceIdParam) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetOwners converts echo context to params.
func (w *ServerInterfaceWrapper) GetOwners(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOwnersParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "email" -------------

	err = runtime.BindQueryParameter("form", true, false, "email", ctx.QueryParams(), &params.Email)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter email: %s", err))
	}

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", ctx.QueryParams(), &params.Cursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cursor: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOwners(ctx, params)
	return err
}

// GetOwner converts echo context to params.
func (w *ServerInterfaceWrapper) GetOwner(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ownerId" -------------
	var ownerId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ownerId", runtime.ParamLocationPath, ctx.Param("ownerId"), &ownerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ownerId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOwner(ctx, ownerId)
	return err
}

// GetServices converts echo context to params.
func (w *ServerInterfaceWrapper) GetServices(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetServicesParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", false, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", false, false, "type", ctx.QueryParams(), &params.Type)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// ------------- Optional query parameter "env" -------------

	err = runtime.BindQueryParameter("form", false, false, "env", ctx.QueryParams(), &params.Env)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter env: %s", err))
	}

	// ------------- Optional query parameter "region" -------------

	err = runtime.BindQueryParameter("form", false, false, "region", ctx.QueryParams(), &params.Region)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter region: %s", err))
	}

	// ------------- Optional query parameter "suspended" -------------

	err = runtime.BindQueryParameter("form", false, false, "suspended", ctx.QueryParams(), &params.Suspended)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter suspended: %s", err))
	}

	// ------------- Optional query parameter "createdBefore" -------------

	err = runtime.BindQueryParameter("form", true, false, "createdBefore", ctx.QueryParams(), &params.CreatedBefore)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter createdBefore: %s", err))
	}

	// ------------- Optional query parameter "createdAfter" -------------

	err = runtime.BindQueryParameter("form", true, false, "createdAfter", ctx.QueryParams(), &params.CreatedAfter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter createdAfter: %s", err))
	}

	// ------------- Optional query parameter "updatedBefore" -------------

	err = runtime.BindQueryParameter("form", true, false, "updatedBefore", ctx.QueryParams(), &params.UpdatedBefore)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter updatedBefore: %s", err))
	}

	// ------------- Optional query parameter "updatedAfter" -------------

	err = runtime.BindQueryParameter("form", true, false, "updatedAfter", ctx.QueryParams(), &params.UpdatedAfter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter updatedAfter: %s", err))
	}

	// ------------- Optional query parameter "ownerId" -------------

	err = runtime.BindQueryParameter("form", false, false, "ownerId", ctx.QueryParams(), &params.OwnerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ownerId: %s", err))
	}

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", ctx.QueryParams(), &params.Cursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cursor: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetServices(ctx, params)
	return err
}

// CreateService converts echo context to params.
func (w *ServerInterfaceWrapper) CreateService(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateService(ctx)
	return err
}

// DeleteService converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteService(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "serviceId" -------------
	var serviceId ServiceIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "serviceId", runtime.ParamLocationPath, ctx.Param("serviceId"), &serviceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter serviceId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteService(ctx, serviceId)
	return err
}

// GetService converts echo context to params.
func (w *ServerInterfaceWrapper) GetService(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "serviceId" -------------
	var serviceId ServiceIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "serviceId", runtime.ParamLocationPath, ctx.Param("serviceId"), &serviceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter serviceId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetService(ctx, serviceId)
	return err
}

// UpdateService converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateService(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "serviceId" -------------
	var serviceId ServiceIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "serviceId", runtime.ParamLocationPath, ctx.Param("serviceId"), &serviceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter serviceId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateService(ctx, serviceId)
	return err
}

// GetCustomDomains converts echo context to params.
func (w *ServerInterfaceWrapper) GetCustomDomains(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "serviceId" -------------
	var serviceId ServiceIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "serviceId", runtime.ParamLocationPath, ctx.Param("serviceId"), &serviceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter serviceId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCustomDomainsParams
	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", ctx.QueryParams(), &params.Cursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cursor: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", false, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "domainType" -------------

	err = runtime.BindQueryParameter("form", true, false, "domainType", ctx.QueryParams(), &params.DomainType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter domainType: %s", err))
	}

	// ------------- Optional query parameter "verificationStatus" -------------

	err = runtime.BindQueryParameter("form", true, false, "verificationStatus", ctx.QueryParams(), &params.VerificationStatus)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter verificationStatus: %s", err))
	}

	// ------------- Optional query parameter "createdBefore" -------------

	err = runtime.BindQueryParameter("form", true, false, "createdBefore", ctx.QueryParams(), &params.CreatedBefore)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter createdBefore: %s", err))
	}

	// ------------- Optional query parameter "createdAfter" -------------

	err = runtime.BindQueryParameter("form", true, false, "createdAfter", ctx.QueryParams(), &params.CreatedAfter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter createdAfter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCustomDomains(ctx, serviceId, params)
	return err
}

// CreateCustomDomain converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCustomDomain(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "serviceId" -------------
	var serviceId ServiceIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "serviceId", runtime.ParamLocationPath, ctx.Param("serviceId"), &serviceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter serviceId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateCustomDomain(ctx, serviceId)
	return err
}

// DeleteCustomDomain converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCustomDomain(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "serviceId" -------------
	var serviceId ServiceIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "serviceId", runtime.ParamLocationPath, ctx.Param("serviceId"), &serviceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter serviceId: %s", err))
	}

	// ------------- Path parameter "customDomainIdOrName" -------------
	var customDomainIdOrName CustomDomainIdOrNameParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "customDomainIdOrName", runtime.ParamLocationPath, ctx.Param("customDomainIdOrName"), &customDomainIdOrName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter customDomainIdOrName: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCustomDomain(ctx, serviceId, customDomainIdOrName)
	return err
}

// GetCustomDomain converts echo context to params.
func (w *ServerInterfaceWrapper) GetCustomDomain(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "serviceId" -------------
	var serviceId ServiceIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "serviceId", runtime.ParamLocationPath, ctx.Param("serviceId"), &serviceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter serviceId: %s", err))
	}

	// ------------- Path parameter "customDomainIdOrName" -------------
	var customDomainIdOrName CustomDomainIdOrNameParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "customDomainIdOrName", runtime.ParamLocationPath, ctx.Param("customDomainIdOrName"), &customDomainIdOrName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter customDomainIdOrName: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCustomDomain(ctx, serviceId, customDomainIdOrName)
	return err
}

// RefreshCustomDomain converts echo context to params.
func (w *ServerInterfaceWrapper) RefreshCustomDomain(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "serviceId" -------------
	var serviceId ServiceIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "serviceId", runtime.ParamLocationPath, ctx.Param("serviceId"), &serviceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter serviceId: %s", err))
	}

	// ------------- Path parameter "customDomainIdOrName" -------------
	var customDomainIdOrName CustomDomainIdOrNameParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "customDomainIdOrName", runtime.ParamLocationPath, ctx.Param("customDomainIdOrName"), &customDomainIdOrName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter customDomainIdOrName: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RefreshCustomDomain(ctx, serviceId, customDomainIdOrName)
	return err
}

// GetDeploys converts echo context to params.
func (w *ServerInterfaceWrapper) GetDeploys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "serviceId" -------------
	var serviceId ServiceIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "serviceId", runtime.ParamLocationPath, ctx.Param("serviceId"), &serviceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter serviceId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDeploysParams
	// ------------- Optional query parameter "startTime" -------------

	err = runtime.BindQueryParameter("form", true, false, "startTime", ctx.QueryParams(), &params.StartTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter startTime: %s", err))
	}

	// ------------- Optional query parameter "endTime" -------------

	err = runtime.BindQueryParameter("form", true, false, "endTime", ctx.QueryParams(), &params.EndTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter endTime: %s", err))
	}

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", ctx.QueryParams(), &params.Cursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cursor: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDeploys(ctx, serviceId, params)
	return err
}

// CreateDeploy converts echo context to params.
func (w *ServerInterfaceWrapper) CreateDeploy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "serviceId" -------------
	var serviceId ServiceIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "serviceId", runtime.ParamLocationPath, ctx.Param("serviceId"), &serviceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter serviceId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateDeploy(ctx, serviceId)
	return err
}

// GetDeploy converts echo context to params.
func (w *ServerInterfaceWrapper) GetDeploy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "serviceId" -------------
	var serviceId ServiceIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "serviceId", runtime.ParamLocationPath, ctx.Param("serviceId"), &serviceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter serviceId: %s", err))
	}

	// ------------- Path parameter "deployId" -------------
	var deployId DeployIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "deployId", runtime.ParamLocationPath, ctx.Param("deployId"), &deployId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter deployId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDeploy(ctx, serviceId, deployId)
	return err
}

// GetEnvVarsForService converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnvVarsForService(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "serviceId" -------------
	var serviceId ServiceIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "serviceId", runtime.ParamLocationPath, ctx.Param("serviceId"), &serviceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter serviceId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEnvVarsForServiceParams
	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", ctx.QueryParams(), &params.Cursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cursor: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEnvVarsForService(ctx, serviceId, params)
	return err
}

// UpdateEnvVarsForService converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateEnvVarsForService(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "serviceId" -------------
	var serviceId ServiceIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "serviceId", runtime.ParamLocationPath, ctx.Param("serviceId"), &serviceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter serviceId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateEnvVarsForService(ctx, serviceId)
	return err
}

// GetHeaders converts echo context to params.
func (w *ServerInterfaceWrapper) GetHeaders(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "serviceId" -------------
	var serviceId ServiceIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "serviceId", runtime.ParamLocationPath, ctx.Param("serviceId"), &serviceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter serviceId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetHeadersParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", false, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", false, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "value" -------------

	err = runtime.BindQueryParameter("form", false, false, "value", ctx.QueryParams(), &params.Value)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter value: %s", err))
	}

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", ctx.QueryParams(), &params.Cursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cursor: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHeaders(ctx, serviceId, params)
	return err
}

// ListJob converts echo context to params.
func (w *ServerInterfaceWrapper) ListJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "serviceId" -------------
	var serviceId ServiceIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "serviceId", runtime.ParamLocationPath, ctx.Param("serviceId"), &serviceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter serviceId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListJobParams
	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", ctx.QueryParams(), &params.Cursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cursor: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", false, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Optional query parameter "createdBefore" -------------

	err = runtime.BindQueryParameter("form", true, false, "createdBefore", ctx.QueryParams(), &params.CreatedBefore)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter createdBefore: %s", err))
	}

	// ------------- Optional query parameter "createdAfter" -------------

	err = runtime.BindQueryParameter("form", true, false, "createdAfter", ctx.QueryParams(), &params.CreatedAfter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter createdAfter: %s", err))
	}

	// ------------- Optional query parameter "startedBefore" -------------

	err = runtime.BindQueryParameter("form", true, false, "startedBefore", ctx.QueryParams(), &params.StartedBefore)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter startedBefore: %s", err))
	}

	// ------------- Optional query parameter "startedAfter" -------------

	err = runtime.BindQueryParameter("form", true, false, "startedAfter", ctx.QueryParams(), &params.StartedAfter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter startedAfter: %s", err))
	}

	// ------------- Optional query parameter "finishedBefore" -------------

	err = runtime.BindQueryParameter("form", true, false, "finishedBefore", ctx.QueryParams(), &params.FinishedBefore)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter finishedBefore: %s", err))
	}

	// ------------- Optional query parameter "finishedAfter" -------------

	err = runtime.BindQueryParameter("form", true, false, "finishedAfter", ctx.QueryParams(), &params.FinishedAfter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter finishedAfter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListJob(ctx, serviceId, params)
	return err
}

// PostJob converts echo context to params.
func (w *ServerInterfaceWrapper) PostJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "serviceId" -------------
	var serviceId ServiceIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "serviceId", runtime.ParamLocationPath, ctx.Param("serviceId"), &serviceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter serviceId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostJob(ctx, serviceId)
	return err
}

// GetJob converts echo context to params.
func (w *ServerInterfaceWrapper) GetJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "serviceId" -------------
	var serviceId ServiceIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "serviceId", runtime.ParamLocationPath, ctx.Param("serviceId"), &serviceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter serviceId: %s", err))
	}

	// ------------- Path parameter "jobId" -------------
	var jobId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "jobId", runtime.ParamLocationPath, ctx.Param("jobId"), &jobId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter jobId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetJob(ctx, serviceId, jobId)
	return err
}

// ResumeService converts echo context to params.
func (w *ServerInterfaceWrapper) ResumeService(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "serviceId" -------------
	var serviceId ServiceIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "serviceId", runtime.ParamLocationPath, ctx.Param("serviceId"), &serviceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter serviceId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ResumeService(ctx, serviceId)
	return err
}

// GetRoutes converts echo context to params.
func (w *ServerInterfaceWrapper) GetRoutes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "serviceId" -------------
	var serviceId ServiceIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "serviceId", runtime.ParamLocationPath, ctx.Param("serviceId"), &serviceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter serviceId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRoutesParams
	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", false, false, "type", ctx.QueryParams(), &params.Type)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// ------------- Optional query parameter "source" -------------

	err = runtime.BindQueryParameter("form", false, false, "source", ctx.QueryParams(), &params.Source)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source: %s", err))
	}

	// ------------- Optional query parameter "destination" -------------

	err = runtime.BindQueryParameter("form", false, false, "destination", ctx.QueryParams(), &params.Destination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter destination: %s", err))
	}

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", ctx.QueryParams(), &params.Cursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cursor: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRoutes(ctx, serviceId, params)
	return err
}

// ScaleService converts echo context to params.
func (w *ServerInterfaceWrapper) ScaleService(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "serviceId" -------------
	var serviceId ServiceIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "serviceId", runtime.ParamLocationPath, ctx.Param("serviceId"), &serviceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter serviceId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ScaleService(ctx, serviceId)
	return err
}

// SuspendService converts echo context to params.
func (w *ServerInterfaceWrapper) SuspendService(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "serviceId" -------------
	var serviceId ServiceIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "serviceId", runtime.ParamLocationPath, ctx.Param("serviceId"), &serviceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter serviceId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SuspendService(ctx, serviceId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/owners", wrapper.GetOwners)
	router.GET(baseURL+"/owners/:ownerId", wrapper.GetOwner)
	router.GET(baseURL+"/services", wrapper.GetServices)
	router.POST(baseURL+"/services", wrapper.CreateService)
	router.DELETE(baseURL+"/services/:serviceId", wrapper.DeleteService)
	router.GET(baseURL+"/services/:serviceId", wrapper.GetService)
	router.PATCH(baseURL+"/services/:serviceId", wrapper.UpdateService)
	router.GET(baseURL+"/services/:serviceId/custom-domains", wrapper.GetCustomDomains)
	router.POST(baseURL+"/services/:serviceId/custom-domains", wrapper.CreateCustomDomain)
	router.DELETE(baseURL+"/services/:serviceId/custom-domains/:customDomainIdOrName", wrapper.DeleteCustomDomain)
	router.GET(baseURL+"/services/:serviceId/custom-domains/:customDomainIdOrName", wrapper.GetCustomDomain)
	router.POST(baseURL+"/services/:serviceId/custom-domains/:customDomainIdOrName/verify", wrapper.RefreshCustomDomain)
	router.GET(baseURL+"/services/:serviceId/deploys", wrapper.GetDeploys)
	router.POST(baseURL+"/services/:serviceId/deploys", wrapper.CreateDeploy)
	router.GET(baseURL+"/services/:serviceId/deploys/:deployId", wrapper.GetDeploy)
	router.GET(baseURL+"/services/:serviceId/env-vars", wrapper.GetEnvVarsForService)
	router.PUT(baseURL+"/services/:serviceId/env-vars", wrapper.UpdateEnvVarsForService)
	router.GET(baseURL+"/services/:serviceId/headers", wrapper.GetHeaders)
	router.GET(baseURL+"/services/:serviceId/jobs", wrapper.ListJob)
	router.POST(baseURL+"/services/:serviceId/jobs", wrapper.PostJob)
	router.GET(baseURL+"/services/:serviceId/jobs/:jobId", wrapper.GetJob)
	router.POST(baseURL+"/services/:serviceId/resume", wrapper.ResumeService)
	router.GET(baseURL+"/services/:serviceId/routes", wrapper.GetRoutes)
	router.POST(baseURL+"/services/:serviceId/scale", wrapper.ScaleService)
	router.POST(baseURL+"/services/:serviceId/suspend", wrapper.SuspendService)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9eXMbN7L4V0HN71flpIoSKdmOd/nXsyU7q2xerLLsvNrnVcngTJOENANMAAwlrkrf",
	"/RWOuTiYg6ckm/kjFkkcDaDvbjTuPZ9FMaNApfCG916MOY5AAtef/IQLxs/Vd+pjAMLnJJaEUW/onegf",
	"kWRoBBNCEQfJCcwInSCg6k+Bxur3KRHorwT43Ot5RHVMP1AcgTe0k3g9T/hTiLCaaMx4hKU39EZzCV7P",
	"k/NYtRSSEzrxHh56np8IyaJTFmFCz4KP/A8cQQ2cn6eAzk4R40hNiNgYySkgMwAK9AgpZDGW0yJg1Tm8",
	"nsfhr4RwCLyh5AkUwa6CGUAcsvlZ0AKaAck0dsOSDrTk/ECDz6R2Z97HzJ/2v1ByhySJQEgcxQoYoIGG",
	"iUSAOKYTUIfMQSac1pyhncdzQEOohAlwDU5IIiJrgPlvfIdoEo2Aq7mJhEggOcUS+ZiiEdj5IaiBQA9d",
	"mj+AMU5C6Q2PB72FuU7NT0Kt63jg9bwI35Eoibzh0WDQ8yJC7acM9QxkehHslgLveKS6LfpJAo4UAsbA",
	"BaM4RIkA/jO6nTKhFiZYwn0QSExZEgYLi4W7OGQBeMMxDgW4F29BKi1f76ADK7IlYc7xXH0Wch6qLxTV",
	"6c/AZ8SHjku0rd1omw21JN4KiblcAXN1vyVxN5urGXsf1ApEzKgAva2vBoN3OPgEfyUgpGaWjEqg+k8c",
	"xyHxsQK2fy0UxPeFof8/h7E39P5fP2e9ffOr6APnzM5W3XRuJkO+RhPKpEKVhAbAhWQsQKN5diLAD9VR",
	"vhocfaE4kVPGyX/U1m8bzLd2Lj0oItRwcv23QBERQokHxhGhMxySwAJ5fI7nEVD5KUORbcP5L5agKBFS",
	"iSrgKDbzlwCWTNGr+mxkmN19C/LLD4yPSBAA3Q2wAdMHPsUzUGDprWQ0FbEZbkCQ8RML6Ks/mPzAErqD",
	"Tf1C8SjUBDcmNGgG65c/mHzr+xBL1WeXsE2AAscSUMxhDJxDgCIICEaK5AXCAokYfDImoCnKAJnR3hRw",
	"kBHX308YHYfE3xH9+wnnCkuFVOBb/pvuK/ItLALdEjl14OzR4FdGYaesqnDuigFQhkJGJ8ARnmESqhMx",
	"oB3//ROW8LuW4VuHT02FtL6ApligEQBFIuExFgIMR3o9GJwpvkBxeKGZ6Xs91va5J0UJhbsYfLVzho8j",
	"3VpDynyNASmMLy+MdP1Cs93cPohmP1JUDOcoocWzfEhlqJaRI+zfTLhiPv/D+A3wU5CYhMbQ4CwGLokR",
	"pgERN9VvSeDUX4zcdqkN9hs2ugZfelr/nbWt1Koo7+nMdrgw1O8XgGUUPo694dfmkQLmF9b40GtuTbEk",
	"MzUt4Ywq4ZN1vFRrTKIzKiSmPgiXOtJTlhpQaY5jG1sXh5g6x4iTMLRqzzmHGYFb8V4zVz0lUKU4f/Xm",
	"IJSKxbzLXnUIDhNisLFph2wrJ3Q1mHX+9vPJP6q7sbFTNeOverS2d8fztfufbqhWU0HbyeavqzhMhPlI",
	"A8yDwp/pTzFn5v/mC9dRrH2ay5zOx4vPXWk/YgmV58qYWAKPe54g/4Ff35XMv6Mm6+/Ic5p7RaM1t1u+",
	"mnl7BeAunxTT0Ru8Mnbqzi7k3MxW5iidjVdA6vpx/522+renzOHHJIcccMpaYKasBO5m2WERJRW2ubDQ",
	"54z+xka1IvfZisYQC3mR+D4IMU7CTwl9K0s+wwBLOJDGnq+eb51UW+4MjJYTJGFXaVo+jWcjpnYkhNbb",
	"TKdUefZM+Bkwy83SzCJTK7R38reCd756/D4HLCFYhjWYUMBn/XWO8TiGOwVKMrKhAtdGLKdtKykzCol/",
	"kYzH5K6GGwWEgy8/MBN1cKo6W1P9Z8AVGWi78UJimYjijphftW86odmHboqhDXFUj4tF1vRf+xhrlh+B",
	"EHjSncMsPe+YUCKmG4FVVPbcwuP1vFFCwuCK0KuYswkHoUg1idUsC1+GZAaaVWBfklmp9xiT0Jyf6Zh9",
	"9pXKFzpPM228xPoWaJoETjouqwZV60D/fMKiCFP3bqUtqIQ72dBiTEKoMSge2uCqEdhPBDi3WbUV2HJp",
	"dNg/zX5tEUnFploudfPc/Ikd3O0G5k5QZzhMOggW1T1tfFk77T9h/qv1Ev+ZjlsGY7L4cydF3w28E8Ty",
	"BI2g1oC47Z1KXaKdpM9y7Nc42auD1wvUOkdBx8UWo5ZNi75moxYhBXc4inU49XhwfHQweHNw9Prz4M3w",
	"eDAcvD588+bN4OXrg8Gb4WDQLkTWG8ucRD7GNRsd3Kn/6uyis4UO6rsDwWcHg8ErV588uFvqpnrUzqP1",
	"zwJTyruBP2XoxRTCkKFbxsPgRW3/zexPQcrmsCu7EgItDDvgaa2hWsERLXibmPHixqwxe42w2ikITpG0",
	"AQiKRFsabqGzi3gpk2Q8vwAp1WgFnp0KtbSJ1/PIhDIOTiauky0cBmeESehc1bLWgVwwQRKhTTcJOHKr",
	"2R20rJhrHdBGjPZxmM3FYVgM9Jxxkz6XJd20rRS46uPKxvlx4jo9L+FhV6hd+LuP9jyJaI/7bPaxnn2s",
	"Zx/r2U2sJx80hYFxmDDq9bwxx/RmnHDphoYl0mE6BiAkoVjaQauUpzN6OikvqSdTJ4DeciKhXYfRv2az",
	"9ErguJZfEKiVpcT220zHPxoMBgMnxnImmc/CIvSfT869nvfl9LwjK0yTYStg4ESy08z52QlTRhxT380S",
	"N+cWrWWuRhP+SD9YrbaRy5QU6zxFusa1HbOy0TWVMhbDfn9C5DQZHfos6nOgAfAD20b0xyEWNwfaODzQ",
	"xmGDPbo0W1WGIPEviISuOuMtjBY06bYebv27rVdd/lRbv4XYr2b0IkwmbmJORKy2u6QC5F9qVLjKPzvj",
	"d/ZXvoQSnHbRAReHHpwykg6iNR1iFQ91HQm/N4I9MxG16FVMPiR3RP0xYXprAjVsPJdTzW15Mprrf4Sb",
	"39rBaxTXzTIJ2hQ42giddNOPK8TSrVuDxr8i2XTr7IrUP1w2oYpb1S0fZq5NmONsUifmILrrEzkClIc8",
	"G6MQxhJBFMt5z2QD35IwRGMchkjtkJrMXDvSkyMzUp5WHDNBJNM3JSqzGt9zmdq7IdGC17rtNGr88Zqj",
	"LXKMWoTvIo4WDsRk2xPqh0kAekPs9hCabQ8yoxyif7FE31IiVEjAARJJHIdzhNEL0+kFyq7VHeobPZuX",
	"fD4H+YGEUD6SxSCrTgwWS3oQHDZRNpJLG6tcL9oYu+li8VS5TZde9SbsqrymS19HHksBsZcQfW792R5W",
	"fjlM4/plPSNbzH0wJ3AliL6EeQujq/yyl92xwjf5Tlzd6q3wTKbO1TUbuYVhRe9a3mO8dW9ZMgqJmNY6",
	"JzbgNOvuBKsRwCvs2rZX1Q361YIEJjjYXdO0wUSXq7W8DbmMNvk5LWLaNHLFsx/LtaCM+e77Ymz/yrY4",
	"j66krBezo4JI354ekTBUUPTSYIWhywJ3SOgNZbfu9KmqObUPTLQFJqaAQzk9mYJ/U+853QcvnkTwosYC",
	"egaBi81g2XMObrj1yX1g48kHNlZB3X3w49kFP4z1m3Ai5xeqvznId4A58LeJOXc9sOo00l/nCpuyv80l",
	"V0LHLLWRsbnPbRM6PGXNMy7/y1jmykjPa0d80t+ht+dnnhUImU2fN+/7U2yzn8sFTyieAIIZ8LmcEjpB",
	"eMQSieYs4cgObElMbakkMixMea61TzvzDLgwgx4dDg4HqWTHMfGG3svDweGxZ3Lk9Ob0tUVo0xj1UhXP",
	"0uGVs8Aber+C/Gha9Er1gL7eO+tnWHayfOURRePOYjJ641cd0YVZ+Sr6xZJGHZoXKtY8XC5UADkeDJa6",
	"b13nljH1j9rLHhVSj5rIxzR6eKjuTgUFP/7TFgmpGzNbb3+xkogp4tCl30KlB3Pdv0PHYk0Acye/vVPN",
	"xX1zXb5Ld9edes1jkijCfO4Nvd+JkCjfCF3KRyBMAyQBR5pS8URRi2eJSPuOLc3176035qGV+rw1sa0j",
	"imwWIV516ZdXJFkLiY464ENa8+K5I90nU1sNNLYhxjWuuVCtwrGbSjctDOao31T0HXat3qSA6GeCqwHN",
	"L3Lh1gj0BxJK4FmlGwWa0MWe8v5dimStLKcqFbKaANQ1ZJYHLk15qAK3RPxzdbAhV6RXgT6/rrc88NZ8",
	"WB12oy6uArZVNJeGPPcBrAZ1CiYaYQEBYhTdTkFOQeP3/AUHlIXbddlCJlExHt9lacX2jtWtFuZf/Yyy",
	"FdvMFTSCMeOAMPKBS0yoKdj2U155CSuZis4uPqK//TI4yqu8/VwKoJm8/18Ojt58HvxtePR6+HLwv3Vl",
	"Js3M7/TE7mqTjZkCy6wOj9VPm1nc8RKLezu2luIW1maTKx7h5OzMWz25dHU7P7k0Z2Xlk2sxYErVKr93",
	"+6iQftdB8rgdfnubaUs2U9GXYdXWTAPUiisTDj3xRHO2iyyOZAvLvWPBfGPmUDGP56HsdlLK7kMFr4+W",
	"mnoxt9ZW8m1IzVoDgasIe2Lvjmvs62IzlQqbroXrx136VYp/rkUmgy5kUijc+NxJy5xuoQqvg7aKBln/",
	"Pru2+WDQMQSTAl6mu1P9fZHuShTwqpozZdsiM2KwHua87NKvUIN1733YIo4ZXGjGsV6bmb9Nf1bODzcu",
	"rveI+BTdYC2ouOBOatFhF+qdKz02xtIk1Zax+YtW1nejjJggfBdtZKd09GwUiCdPuKtoKj8SsRtiW02z",
	"6ZvqYAemZlejF/qkUEfM4Yrenrnc6+rnXnyq5Mk4u3EMd4hxlBVHEzVOjkJptSJMS9RYa4QjLUKmYMlL",
	"kpX3rQ40R60zF4jdi541wFkG6Pv0hdas8Zl5RB/flbVY3rDxHkGx7VpOrd1K971u/dR8dBWWmcpcIyVR",
	"KiY3o2Q3OPyKUnkNRbtT+TBXeuSl07G2Wb9gp1hjmbbbKfl5evv2yvoz5x5vg6Cip9byjo5ae//e9QJf",
	"B69lhXm0uS5PipCXHZh7ifijuz07o3Wvk425TT/ogiK4V/P2SF3rQl0CrdfT9LrkHNQ95lpOJlxeVvS1",
	"qT5ffNl214uo03U/wZiDmDazh+M2eVV0YSDJyWQCfC++fnhK/1OjPjr940I/DUgmicG8lTQzk7XQ6Eg9",
	"tU2W5hflt147kFrpVePvPacpfzKh8QadafUoGU17qn9qbpwgI8WU0lPi3Lrj5jR9xHwzLhs/BMxPsD+F",
	"8rXEgF1RJq/0zy0XFItNS1cVs87FsbrcCt68K6gTaT8lX8/e9/J0SP6zUfkQtnTvJPs2yd6/TxMTH9qF",
	"/DZt2Hp038up79EObcDZ7VueKc63WptAZwcz3Hxp+r0piveB8TxDaGfZBI+vqOYv9rQX9NsrqnsGkDKA",
	"wt1DNMOcqLZie5l9iazL63PR76pa7FOpirn5/MHnxCj23q8flr3Y7MElmEut7C8UHKwT/f+wTbrfZLep",
	"Tz7SZVmQnGKJ7EQI6/KxknXM9bNX9reb62dgM0mJTykH0cKln2zrCph5321DkH3PKl0B87tU2NzrdHud",
	"zuh004wfbkOLq+XU12xUz6Z/J0L+xkZPKcXbPEGYlmO5ZiP007cYaEDo5FsPfeMJpfbP7GHCbz3EOPpm",
	"nuz99nPXchDVzOZKLQg7sX6+QM+rU7Lz9xDtK8GbLQyhTuz7TIQurew7Kgih12Wf4XyEE7Mzb+3E0pXt",
	"/MTSl023dGLpy7KPcGTp1Fs7s2xtOz+07L3eJ3rNIF8UHvlHxy8VG29T+uwbx00Kn2ryjAzzFdS9Zx8C",
	"1qpQrn79pj5uMfh7zlLlajNx3/w96jUfCW55FXi392sN3eyp4hELZVxrJF0gi0aDon9/zUYtYdEU9fd4",
	"893hTWbTOjFnAyHKpgqdZk5HYU6NkquX5SwhOQeRmItRWxIOn/QEtXVAjutryRjQAqTtUCHGSRjO9679",
	"H97LpJBixcIA+SM5dbz8k2mxXFFaRW2KaPXwiCchrF34dakXdNeqWTsFZN7a1cGI7AVA/T5QR/9S+lTv",
	"lqvr6ucKs8eAVwa3+KDwPgzQahHmNNPhPal9EGAfBDAKU8q4dHF8y7o0a9x5XED4ONymgnOhxl8/aWTh",
	"tvrC4zSZL+dl+ws/xa6PbfS2J3TudbkfllloyklVOSSZEu8KLRFNohFwJdxJhsnLaXq2lvk2yd7MsIph",
	"kxd435s2e3LIycGgRYttU3jzSuNz8bWrr5cKX80rjQbby89S4ZgcFp6mmh1p/LazpCVSFi8GKo3V/pJm",
	"Zxe+0q4Qtyfjm3mY5BsCGsSMUCnSx7EjxgERanRPpcubx6/SZ0kKL+qY3Cj9Ktbb8zN0A3M0xQJhTTZI",
	"ssNcr7fPoBRgy7bt4fLh/wIAAP//645oAuyyAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
