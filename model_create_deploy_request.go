/*
Render Public API

Manage everything about your Render services

API version: 1.0.0
Contact: support@render.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package render

import (
	"encoding/json"
)

// CreateDeployRequest struct for CreateDeployRequest
type CreateDeployRequest struct {
	// Defaults to \"do_not_clear\"
	ClearCache *string `json:"clearCache,omitempty"`
}

// NewCreateDeployRequest instantiates a new CreateDeployRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateDeployRequest() *CreateDeployRequest {
	this := CreateDeployRequest{}
	var clearCache string = "do_not_clear"
	this.ClearCache = &clearCache
	return &this
}

// NewCreateDeployRequestWithDefaults instantiates a new CreateDeployRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateDeployRequestWithDefaults() *CreateDeployRequest {
	this := CreateDeployRequest{}
	var clearCache string = "do_not_clear"
	this.ClearCache = &clearCache
	return &this
}

// GetClearCache returns the ClearCache field value if set, zero value otherwise.
func (o *CreateDeployRequest) GetClearCache() string {
	if o == nil || isNil(o.ClearCache) {
		var ret string
		return ret
	}
	return *o.ClearCache
}

// GetClearCacheOk returns a tuple with the ClearCache field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDeployRequest) GetClearCacheOk() (*string, bool) {
	if o == nil || isNil(o.ClearCache) {
    return nil, false
	}
	return o.ClearCache, true
}

// HasClearCache returns a boolean if a field has been set.
func (o *CreateDeployRequest) HasClearCache() bool {
	if o != nil && !isNil(o.ClearCache) {
		return true
	}

	return false
}

// SetClearCache gets a reference to the given string and assigns it to the ClearCache field.
func (o *CreateDeployRequest) SetClearCache(v string) {
	o.ClearCache = &v
}

func (o CreateDeployRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ClearCache) {
		toSerialize["clearCache"] = o.ClearCache
	}
	return json.Marshal(toSerialize)
}

type NullableCreateDeployRequest struct {
	value *CreateDeployRequest
	isSet bool
}

func (v NullableCreateDeployRequest) Get() *CreateDeployRequest {
	return v.value
}

func (v *NullableCreateDeployRequest) Set(val *CreateDeployRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateDeployRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateDeployRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateDeployRequest(val *CreateDeployRequest) *NullableCreateDeployRequest {
	return &NullableCreateDeployRequest{value: val, isSet: true}
}

func (v NullableCreateDeployRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateDeployRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


