/*
Render Public API

Manage everything about your Render services

API version: 1.0.0
Contact: support@render.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package render

import (
	"encoding/json"
)

// GetRoutes200ResponseInner struct for GetRoutes200ResponseInner
type GetRoutes200ResponseInner struct {
	Routes *Route `json:"routes,omitempty"`
	Cursor *string `json:"cursor,omitempty"`
}

// NewGetRoutes200ResponseInner instantiates a new GetRoutes200ResponseInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetRoutes200ResponseInner() *GetRoutes200ResponseInner {
	this := GetRoutes200ResponseInner{}
	return &this
}

// NewGetRoutes200ResponseInnerWithDefaults instantiates a new GetRoutes200ResponseInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetRoutes200ResponseInnerWithDefaults() *GetRoutes200ResponseInner {
	this := GetRoutes200ResponseInner{}
	return &this
}

// GetRoutes returns the Routes field value if set, zero value otherwise.
func (o *GetRoutes200ResponseInner) GetRoutes() Route {
	if o == nil || isNil(o.Routes) {
		var ret Route
		return ret
	}
	return *o.Routes
}

// GetRoutesOk returns a tuple with the Routes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetRoutes200ResponseInner) GetRoutesOk() (*Route, bool) {
	if o == nil || isNil(o.Routes) {
    return nil, false
	}
	return o.Routes, true
}

// HasRoutes returns a boolean if a field has been set.
func (o *GetRoutes200ResponseInner) HasRoutes() bool {
	if o != nil && !isNil(o.Routes) {
		return true
	}

	return false
}

// SetRoutes gets a reference to the given Route and assigns it to the Routes field.
func (o *GetRoutes200ResponseInner) SetRoutes(v Route) {
	o.Routes = &v
}

// GetCursor returns the Cursor field value if set, zero value otherwise.
func (o *GetRoutes200ResponseInner) GetCursor() string {
	if o == nil || isNil(o.Cursor) {
		var ret string
		return ret
	}
	return *o.Cursor
}

// GetCursorOk returns a tuple with the Cursor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetRoutes200ResponseInner) GetCursorOk() (*string, bool) {
	if o == nil || isNil(o.Cursor) {
    return nil, false
	}
	return o.Cursor, true
}

// HasCursor returns a boolean if a field has been set.
func (o *GetRoutes200ResponseInner) HasCursor() bool {
	if o != nil && !isNil(o.Cursor) {
		return true
	}

	return false
}

// SetCursor gets a reference to the given string and assigns it to the Cursor field.
func (o *GetRoutes200ResponseInner) SetCursor(v string) {
	o.Cursor = &v
}

func (o GetRoutes200ResponseInner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Routes) {
		toSerialize["routes"] = o.Routes
	}
	if !isNil(o.Cursor) {
		toSerialize["cursor"] = o.Cursor
	}
	return json.Marshal(toSerialize)
}

type NullableGetRoutes200ResponseInner struct {
	value *GetRoutes200ResponseInner
	isSet bool
}

func (v NullableGetRoutes200ResponseInner) Get() *GetRoutes200ResponseInner {
	return v.value
}

func (v *NullableGetRoutes200ResponseInner) Set(val *GetRoutes200ResponseInner) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRoutes200ResponseInner) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRoutes200ResponseInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRoutes200ResponseInner(val *GetRoutes200ResponseInner) *NullableGetRoutes200ResponseInner {
	return &NullableGetRoutes200ResponseInner{value: val, isSet: true}
}

func (v NullableGetRoutes200ResponseInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRoutes200ResponseInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


