/*
Render Public API

Manage everything about your Render services

API version: 1.0.0
Contact: support@render.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package render

import (
	"encoding/json"
	"fmt"
)

// UpdateEnvVarsForServiceRequestInner - struct for UpdateEnvVarsForServiceRequestInner
type UpdateEnvVarsForServiceRequestInner struct {
	EnvVarKeyGenerateValue *EnvVarKeyGenerateValue
	EnvVarKeyValue *EnvVarKeyValue
}

// EnvVarKeyGenerateValueAsUpdateEnvVarsForServiceRequestInner is a convenience function that returns EnvVarKeyGenerateValue wrapped in UpdateEnvVarsForServiceRequestInner
func EnvVarKeyGenerateValueAsUpdateEnvVarsForServiceRequestInner(v *EnvVarKeyGenerateValue) UpdateEnvVarsForServiceRequestInner {
	return UpdateEnvVarsForServiceRequestInner{
		EnvVarKeyGenerateValue: v,
	}
}

// EnvVarKeyValueAsUpdateEnvVarsForServiceRequestInner is a convenience function that returns EnvVarKeyValue wrapped in UpdateEnvVarsForServiceRequestInner
func EnvVarKeyValueAsUpdateEnvVarsForServiceRequestInner(v *EnvVarKeyValue) UpdateEnvVarsForServiceRequestInner {
	return UpdateEnvVarsForServiceRequestInner{
		EnvVarKeyValue: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *UpdateEnvVarsForServiceRequestInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into EnvVarKeyGenerateValue
	err = newStrictDecoder(data).Decode(&dst.EnvVarKeyGenerateValue)
	if err == nil {
		jsonEnvVarKeyGenerateValue, _ := json.Marshal(dst.EnvVarKeyGenerateValue)
		if string(jsonEnvVarKeyGenerateValue) == "{}" { // empty struct
			dst.EnvVarKeyGenerateValue = nil
		} else {
			match++
		}
	} else {
		dst.EnvVarKeyGenerateValue = nil
	}

	// try to unmarshal data into EnvVarKeyValue
	err = newStrictDecoder(data).Decode(&dst.EnvVarKeyValue)
	if err == nil {
		jsonEnvVarKeyValue, _ := json.Marshal(dst.EnvVarKeyValue)
		if string(jsonEnvVarKeyValue) == "{}" { // empty struct
			dst.EnvVarKeyValue = nil
		} else {
			match++
		}
	} else {
		dst.EnvVarKeyValue = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.EnvVarKeyGenerateValue = nil
		dst.EnvVarKeyValue = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UpdateEnvVarsForServiceRequestInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UpdateEnvVarsForServiceRequestInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UpdateEnvVarsForServiceRequestInner) MarshalJSON() ([]byte, error) {
	if src.EnvVarKeyGenerateValue != nil {
		return json.Marshal(&src.EnvVarKeyGenerateValue)
	}

	if src.EnvVarKeyValue != nil {
		return json.Marshal(&src.EnvVarKeyValue)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UpdateEnvVarsForServiceRequestInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.EnvVarKeyGenerateValue != nil {
		return obj.EnvVarKeyGenerateValue
	}

	if obj.EnvVarKeyValue != nil {
		return obj.EnvVarKeyValue
	}

	// all schemas are nil
	return nil
}

type NullableUpdateEnvVarsForServiceRequestInner struct {
	value *UpdateEnvVarsForServiceRequestInner
	isSet bool
}

func (v NullableUpdateEnvVarsForServiceRequestInner) Get() *UpdateEnvVarsForServiceRequestInner {
	return v.value
}

func (v *NullableUpdateEnvVarsForServiceRequestInner) Set(val *UpdateEnvVarsForServiceRequestInner) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateEnvVarsForServiceRequestInner) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateEnvVarsForServiceRequestInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateEnvVarsForServiceRequestInner(val *UpdateEnvVarsForServiceRequestInner) *NullableUpdateEnvVarsForServiceRequestInner {
	return &NullableUpdateEnvVarsForServiceRequestInner{value: val, isSet: true}
}

func (v NullableUpdateEnvVarsForServiceRequestInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateEnvVarsForServiceRequestInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


