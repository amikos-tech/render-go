/*
Render Public API

Manage everything about your Render services

API version: 1.0.0
Contact: support@render.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package render

import (
	"encoding/json"
	"fmt"
)

// WebServiceDetailsPOSTEnvSpecificDetails - struct for WebServiceDetailsPOSTEnvSpecificDetails
type WebServiceDetailsPOSTEnvSpecificDetails struct {
	DockerDetailsPOST *DockerDetailsPOST
	NativeEnvironmentDetailsPOST *NativeEnvironmentDetailsPOST
}

// DockerDetailsPOSTAsWebServiceDetailsPOSTEnvSpecificDetails is a convenience function that returns DockerDetailsPOST wrapped in WebServiceDetailsPOSTEnvSpecificDetails
func DockerDetailsPOSTAsWebServiceDetailsPOSTEnvSpecificDetails(v *DockerDetailsPOST) WebServiceDetailsPOSTEnvSpecificDetails {
	return WebServiceDetailsPOSTEnvSpecificDetails{
		DockerDetailsPOST: v,
	}
}

// NativeEnvironmentDetailsPOSTAsWebServiceDetailsPOSTEnvSpecificDetails is a convenience function that returns NativeEnvironmentDetailsPOST wrapped in WebServiceDetailsPOSTEnvSpecificDetails
func NativeEnvironmentDetailsPOSTAsWebServiceDetailsPOSTEnvSpecificDetails(v *NativeEnvironmentDetailsPOST) WebServiceDetailsPOSTEnvSpecificDetails {
	return WebServiceDetailsPOSTEnvSpecificDetails{
		NativeEnvironmentDetailsPOST: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *WebServiceDetailsPOSTEnvSpecificDetails) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DockerDetailsPOST
	err = newStrictDecoder(data).Decode(&dst.DockerDetailsPOST)
	if err == nil {
		jsonDockerDetailsPOST, _ := json.Marshal(dst.DockerDetailsPOST)
		if string(jsonDockerDetailsPOST) == "{}" { // empty struct
			dst.DockerDetailsPOST = nil
		} else {
			match++
		}
	} else {
		dst.DockerDetailsPOST = nil
	}

	// try to unmarshal data into NativeEnvironmentDetailsPOST
	err = newStrictDecoder(data).Decode(&dst.NativeEnvironmentDetailsPOST)
	if err == nil {
		jsonNativeEnvironmentDetailsPOST, _ := json.Marshal(dst.NativeEnvironmentDetailsPOST)
		if string(jsonNativeEnvironmentDetailsPOST) == "{}" { // empty struct
			dst.NativeEnvironmentDetailsPOST = nil
		} else {
			match++
		}
	} else {
		dst.NativeEnvironmentDetailsPOST = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DockerDetailsPOST = nil
		dst.NativeEnvironmentDetailsPOST = nil

		return fmt.Errorf("data matches more than one schema in oneOf(WebServiceDetailsPOSTEnvSpecificDetails)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(WebServiceDetailsPOSTEnvSpecificDetails)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src WebServiceDetailsPOSTEnvSpecificDetails) MarshalJSON() ([]byte, error) {
	if src.DockerDetailsPOST != nil {
		return json.Marshal(&src.DockerDetailsPOST)
	}

	if src.NativeEnvironmentDetailsPOST != nil {
		return json.Marshal(&src.NativeEnvironmentDetailsPOST)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *WebServiceDetailsPOSTEnvSpecificDetails) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.DockerDetailsPOST != nil {
		return obj.DockerDetailsPOST
	}

	if obj.NativeEnvironmentDetailsPOST != nil {
		return obj.NativeEnvironmentDetailsPOST
	}

	// all schemas are nil
	return nil
}

type NullableWebServiceDetailsPOSTEnvSpecificDetails struct {
	value *WebServiceDetailsPOSTEnvSpecificDetails
	isSet bool
}

func (v NullableWebServiceDetailsPOSTEnvSpecificDetails) Get() *WebServiceDetailsPOSTEnvSpecificDetails {
	return v.value
}

func (v *NullableWebServiceDetailsPOSTEnvSpecificDetails) Set(val *WebServiceDetailsPOSTEnvSpecificDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableWebServiceDetailsPOSTEnvSpecificDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableWebServiceDetailsPOSTEnvSpecificDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebServiceDetailsPOSTEnvSpecificDetails(val *WebServiceDetailsPOSTEnvSpecificDetails) *NullableWebServiceDetailsPOSTEnvSpecificDetails {
	return &NullableWebServiceDetailsPOSTEnvSpecificDetails{value: val, isSet: true}
}

func (v NullableWebServiceDetailsPOSTEnvSpecificDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebServiceDetailsPOSTEnvSpecificDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


